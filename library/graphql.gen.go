// Code generated by gqlclientgen - DO NOT EDIT.

package library

import (
	"encoding/json"
	"fmt"
	gqlclient "git.sr.ht/~emersion/gqlclient"
)

type AudioSubtype struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*AudioSubtype) isGenericMorph() {}

type AudioSubtypeEntity struct {
	Attributes *AudioSubtype `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type AudioSubtypeEntityResponse struct {
	Data *AudioSubtypeEntity `json:"data,omitempty"`
}

type AudioSubtypeEntityResponseCollection struct {
	Data []AudioSubtypeEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type AudioSubtypeFiltersInput struct {
	And       []*AudioSubtypeFiltersInput                   `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *AudioSubtypeFiltersInput                     `json:"not,omitempty"`
	Or        []*AudioSubtypeFiltersInput                   `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type AudioSubtypeInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type BooleanFilterInput struct {
	And          []*bool             `json:"and,omitempty"`
	Between      []*bool             `json:"between,omitempty"`
	Contains     *bool               `json:"contains,omitempty"`
	Containsi    *bool               `json:"containsi,omitempty"`
	EndsWith     *bool               `json:"endsWith,omitempty"`
	Eq           *bool               `json:"eq,omitempty"`
	Eqi          *bool               `json:"eqi,omitempty"`
	Gt           *bool               `json:"gt,omitempty"`
	Gte          *bool               `json:"gte,omitempty"`
	In           []*bool             `json:"in,omitempty"`
	Lt           *bool               `json:"lt,omitempty"`
	Lte          *bool               `json:"lte,omitempty"`
	Ne           *bool               `json:"ne,omitempty"`
	Not          *BooleanFilterInput `json:"not,omitempty"`
	NotContains  *bool               `json:"notContains,omitempty"`
	NotContainsi *bool               `json:"notContainsi,omitempty"`
	NotIn        []*bool             `json:"notIn,omitempty"`
	NotNull      *bool               `json:"notNull,omitempty"`
	Null         *bool               `json:"null,omitempty"`
	Or           []*bool             `json:"or,omitempty"`
	StartsWith   *bool               `json:"startsWith,omitempty"`
}

type Category struct {
	CreatedAt *DateTime                               `json:"createdAt,omitempty"`
	Series    *ENUM_CATEGORY_SERIES                   `json:"series,omitempty"`
	Slug      string                                  `json:"slug"`
	Titles    []*ComponentTranslationsCategoriesTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                               `json:"updatedAt,omitempty"`
}

func (*Category) isGenericMorph() {}

type CategoryEntity struct {
	Attributes *Category `json:"attributes,omitempty"`
	Id         string    `json:"id,omitempty"`
}

type CategoryEntityResponse struct {
	Data *CategoryEntity `json:"data,omitempty"`
}

type CategoryEntityResponseCollection struct {
	Data []CategoryEntity        `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type CategoryFiltersInput struct {
	And       []*CategoryFiltersInput                           `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                              `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                    `json:"id,omitempty"`
	Not       *CategoryFiltersInput                             `json:"not,omitempty"`
	Or        []*CategoryFiltersInput                           `json:"or,omitempty"`
	Series    *StringFilterInput                                `json:"series,omitempty"`
	Slug      *StringFilterInput                                `json:"slug,omitempty"`
	Titles    *ComponentTranslationsCategoriesTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                              `json:"updatedAt,omitempty"`
}

type CategoryInput struct {
	Series *ENUM_CATEGORY_SERIES                        `json:"series,omitempty"`
	Slug   *string                                      `json:"slug,omitempty"`
	Titles []*ComponentTranslationsCategoriesTitleInput `json:"titles,omitempty"`
}

type CategoryRelationResponseCollection struct {
	Data []CategoryEntity `json:"data"`
}

type Chronicle struct {
	Chapter      *ChroniclesChapterEntityResponse   `json:"chapter,omitempty"`
	Contents     *ContentRelationResponseCollection `json:"contents,omitempty"`
	CreatedAt    *DateTime                          `json:"createdAt,omitempty"`
	Date_end     *ComponentBasicsDatepicker         `json:"date_end"`
	Date_start   *ComponentBasicsDatepicker         `json:"date_start"`
	Slug         string                             `json:"slug"`
	Translations []*ComponentTranslationsChronicles `json:"translations,omitempty"`
	UpdatedAt    *DateTime                          `json:"updatedAt,omitempty"`
}

func (*Chronicle) isGenericMorph() {}

type ChronicleEntity struct {
	Attributes *Chronicle `json:"attributes,omitempty"`
	Id         string     `json:"id,omitempty"`
}

type ChronicleEntityResponse struct {
	Data *ChronicleEntity `json:"data,omitempty"`
}

type ChronicleEntityResponseCollection struct {
	Data []ChronicleEntity       `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ChronicleFiltersInput struct {
	And          []*ChronicleFiltersInput                     `json:"and,omitempty"`
	Chapter      *ChroniclesChapterFiltersInput               `json:"chapter,omitempty"`
	Contents     *ContentFiltersInput                         `json:"contents,omitempty"`
	CreatedAt    *DateTimeFilterInput                         `json:"createdAt,omitempty"`
	Date_end     *ComponentBasicsDatepickerFiltersInput       `json:"date_end,omitempty"`
	Date_start   *ComponentBasicsDatepickerFiltersInput       `json:"date_start,omitempty"`
	Id           *IDFilterInput                               `json:"id,omitempty"`
	Not          *ChronicleFiltersInput                       `json:"not,omitempty"`
	Or           []*ChronicleFiltersInput                     `json:"or,omitempty"`
	Slug         *StringFilterInput                           `json:"slug,omitempty"`
	Translations *ComponentTranslationsChroniclesFiltersInput `json:"translations,omitempty"`
	UpdatedAt    *DateTimeFilterInput                         `json:"updatedAt,omitempty"`
}

type ChronicleInput struct {
	Chapter      string                                  `json:"chapter,omitempty"`
	Contents     []string                                `json:"contents,omitempty"`
	Date_end     *ComponentBasicsDatepickerInput         `json:"date_end,omitempty"`
	Date_start   *ComponentBasicsDatepickerInput         `json:"date_start,omitempty"`
	Slug         *string                                 `json:"slug,omitempty"`
	Translations []*ComponentTranslationsChroniclesInput `json:"translations,omitempty"`
}

type ChronicleRelationResponseCollection struct {
	Data []ChronicleEntity `json:"data"`
}

type ChroniclesChapter struct {
	Chronicles *ChronicleRelationResponseCollection `json:"chronicles,omitempty"`
	CreatedAt  *DateTime                            `json:"createdAt,omitempty"`
	Slug       string                               `json:"slug"`
	Titles     []*ComponentTranslationsSimpleTitle  `json:"titles,omitempty"`
	UpdatedAt  *DateTime                            `json:"updatedAt,omitempty"`
}

func (*ChroniclesChapter) isGenericMorph() {}

type ChroniclesChapterEntity struct {
	Attributes *ChroniclesChapter `json:"attributes,omitempty"`
	Id         string             `json:"id,omitempty"`
}

type ChroniclesChapterEntityResponse struct {
	Data *ChroniclesChapterEntity `json:"data,omitempty"`
}

type ChroniclesChapterEntityResponseCollection struct {
	Data []ChroniclesChapterEntity `json:"data"`
	Meta *ResponseCollectionMeta   `json:"meta"`
}

type ChroniclesChapterFiltersInput struct {
	And        []*ChroniclesChapterFiltersInput              `json:"and,omitempty"`
	Chronicles *ChronicleFiltersInput                        `json:"chronicles,omitempty"`
	CreatedAt  *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id         *IDFilterInput                                `json:"id,omitempty"`
	Not        *ChroniclesChapterFiltersInput                `json:"not,omitempty"`
	Or         []*ChroniclesChapterFiltersInput              `json:"or,omitempty"`
	Slug       *StringFilterInput                            `json:"slug,omitempty"`
	Titles     *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt  *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type ChroniclesChapterInput struct {
	Chronicles []string                                 `json:"chronicles,omitempty"`
	Slug       *string                                  `json:"slug,omitempty"`
	Titles     []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type ChronologyEra struct {
	CreatedAt     *DateTime                             `json:"createdAt,omitempty"`
	Ending_year   int32                                 `json:"ending_year"`
	Slug          string                                `json:"slug"`
	Starting_year int32                                 `json:"starting_year"`
	Title         []*ComponentTranslationsChronologyEra `json:"title,omitempty"`
	UpdatedAt     *DateTime                             `json:"updatedAt,omitempty"`
}

func (*ChronologyEra) isGenericMorph() {}

type ChronologyEraEntity struct {
	Attributes *ChronologyEra `json:"attributes,omitempty"`
	Id         string         `json:"id,omitempty"`
}

type ChronologyEraEntityResponse struct {
	Data *ChronologyEraEntity `json:"data,omitempty"`
}

type ChronologyEraEntityResponseCollection struct {
	Data []ChronologyEraEntity   `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ChronologyEraFiltersInput struct {
	And           []*ChronologyEraFiltersInput                    `json:"and,omitempty"`
	CreatedAt     *DateTimeFilterInput                            `json:"createdAt,omitempty"`
	Ending_year   *IntFilterInput                                 `json:"ending_year,omitempty"`
	Id            *IDFilterInput                                  `json:"id,omitempty"`
	Not           *ChronologyEraFiltersInput                      `json:"not,omitempty"`
	Or            []*ChronologyEraFiltersInput                    `json:"or,omitempty"`
	Slug          *StringFilterInput                              `json:"slug,omitempty"`
	Starting_year *IntFilterInput                                 `json:"starting_year,omitempty"`
	Title         *ComponentTranslationsChronologyEraFiltersInput `json:"title,omitempty"`
	UpdatedAt     *DateTimeFilterInput                            `json:"updatedAt,omitempty"`
}

type ChronologyEraInput struct {
	Ending_year   *int32                                     `json:"ending_year,omitempty"`
	Slug          *string                                    `json:"slug,omitempty"`
	Starting_year *int32                                     `json:"starting_year,omitempty"`
	Title         []*ComponentTranslationsChronologyEraInput `json:"title,omitempty"`
}

type ChronologyItem struct {
	CreatedAt      *DateTime                             `json:"createdAt,omitempty"`
	Day            *int32                                `json:"day,omitempty"`
	Displayed_date *string                               `json:"displayed_date,omitempty"`
	Events         []*ComponentCollectionsComponentEvent `json:"events,omitempty"`
	Month          *int32                                `json:"month,omitempty"`
	UpdatedAt      *DateTime                             `json:"updatedAt,omitempty"`
	Wiki_pages     *WikiPageRelationResponseCollection   `json:"wiki_pages,omitempty"`
	Year           int32                                 `json:"year"`
}

func (*ChronologyItem) isGenericMorph() {}

type ChronologyItemEntity struct {
	Attributes *ChronologyItem `json:"attributes,omitempty"`
	Id         string          `json:"id,omitempty"`
}

type ChronologyItemEntityResponse struct {
	Data *ChronologyItemEntity `json:"data,omitempty"`
}

type ChronologyItemEntityResponseCollection struct {
	Data []ChronologyItemEntity  `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ChronologyItemFiltersInput struct {
	And            []*ChronologyItemFiltersInput                   `json:"and,omitempty"`
	CreatedAt      *DateTimeFilterInput                            `json:"createdAt,omitempty"`
	Day            *IntFilterInput                                 `json:"day,omitempty"`
	Displayed_date *StringFilterInput                              `json:"displayed_date,omitempty"`
	Events         *ComponentCollectionsComponentEventFiltersInput `json:"events,omitempty"`
	Id             *IDFilterInput                                  `json:"id,omitempty"`
	Month          *IntFilterInput                                 `json:"month,omitempty"`
	Not            *ChronologyItemFiltersInput                     `json:"not,omitempty"`
	Or             []*ChronologyItemFiltersInput                   `json:"or,omitempty"`
	UpdatedAt      *DateTimeFilterInput                            `json:"updatedAt,omitempty"`
	Wiki_pages     *WikiPageFiltersInput                           `json:"wiki_pages,omitempty"`
	Year           *IntFilterInput                                 `json:"year,omitempty"`
}

type ChronologyItemInput struct {
	Day            *int32                                     `json:"day,omitempty"`
	Displayed_date *string                                    `json:"displayed_date,omitempty"`
	Events         []*ComponentCollectionsComponentEventInput `json:"events,omitempty"`
	Month          *int32                                     `json:"month,omitempty"`
	Wiki_pages     []string                                   `json:"wiki_pages,omitempty"`
	Year           *int32                                     `json:"year,omitempty"`
}

type ChronologyItemRelationResponseCollection struct {
	Data []ChronologyItemEntity `json:"data"`
}

type ComponentBasicsCredits struct {
	Cleaners        *RecorderRelationResponseCollection `json:"cleaners,omitempty"`
	Footnotes       *string                             `json:"footnotes,omitempty"`
	Id              string                              `json:"id"`
	Proofreaders    *RecorderRelationResponseCollection `json:"proofreaders,omitempty"`
	Scanners        *RecorderRelationResponseCollection `json:"scanners,omitempty"`
	Source_language *LanguageEntityResponse             `json:"source_language,omitempty"`
	Subbers         *RecorderRelationResponseCollection `json:"subbers,omitempty"`
	Transcribers    *RecorderRelationResponseCollection `json:"transcribers,omitempty"`
	Translators     *RecorderRelationResponseCollection `json:"translators,omitempty"`
	Typesetters     *RecorderRelationResponseCollection `json:"typesetters,omitempty"`
}

func (*ComponentBasicsCredits) isGenericMorph() {}

type ComponentBasicsDatepicker struct {
	Day   *int32 `json:"day,omitempty"`
	Id    string `json:"id"`
	Month *int32 `json:"month,omitempty"`
	Year  *int32 `json:"year,omitempty"`
}

func (*ComponentBasicsDatepicker) isGenericMorph() {}

type ComponentBasicsDatepickerFiltersInput struct {
	And   []*ComponentBasicsDatepickerFiltersInput `json:"and,omitempty"`
	Day   *IntFilterInput                          `json:"day,omitempty"`
	Month *IntFilterInput                          `json:"month,omitempty"`
	Not   *ComponentBasicsDatepickerFiltersInput   `json:"not,omitempty"`
	Or    []*ComponentBasicsDatepickerFiltersInput `json:"or,omitempty"`
	Year  *IntFilterInput                          `json:"year,omitempty"`
}

type ComponentBasicsDatepickerInput struct {
	Day   *int32 `json:"day,omitempty"`
	Id    string `json:"id,omitempty"`
	Month *int32 `json:"month,omitempty"`
	Year  *int32 `json:"year,omitempty"`
}

type ComponentBasicsFileSize struct {
	Id   string                            `json:"id"`
	Size float64                           `json:"size"`
	Unit ENUM_COMPONENTBASICSFILESIZE_UNIT `json:"unit"`
}

func (*ComponentBasicsFileSize) isGenericMorph() {}

type ComponentBasicsFileSizeFiltersInput struct {
	And  []*ComponentBasicsFileSizeFiltersInput `json:"and,omitempty"`
	Not  *ComponentBasicsFileSizeFiltersInput   `json:"not,omitempty"`
	Or   []*ComponentBasicsFileSizeFiltersInput `json:"or,omitempty"`
	Size *FloatFilterInput                      `json:"size,omitempty"`
	Unit *StringFilterInput                     `json:"unit,omitempty"`
}

type ComponentBasicsFileSizeInput struct {
	Id   string                             `json:"id,omitempty"`
	Size *float64                           `json:"size,omitempty"`
	Unit *ENUM_COMPONENTBASICSFILESIZE_UNIT `json:"unit,omitempty"`
}

type ComponentBasicsPrice struct {
	Amount   *float64                `json:"amount,omitempty"`
	Currency *CurrencyEntityResponse `json:"currency,omitempty"`
	Id       string                  `json:"id"`
}

func (*ComponentBasicsPrice) isGenericMorph() {}

type ComponentBasicsPriceFiltersInput struct {
	Amount   *FloatFilterInput                   `json:"amount,omitempty"`
	And      []*ComponentBasicsPriceFiltersInput `json:"and,omitempty"`
	Currency *CurrencyFiltersInput               `json:"currency,omitempty"`
	Not      *ComponentBasicsPriceFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentBasicsPriceFiltersInput `json:"or,omitempty"`
}

type ComponentBasicsPriceInput struct {
	Amount   *float64 `json:"amount,omitempty"`
	Currency string   `json:"currency,omitempty"`
	Id       string   `json:"id,omitempty"`
}

type ComponentBasicsSize struct {
	Height    *int32 `json:"height,omitempty"`
	Id        string `json:"id"`
	Thickness *int32 `json:"thickness,omitempty"`
	Width     *int32 `json:"width,omitempty"`
}

func (*ComponentBasicsSize) isGenericMorph() {}

type ComponentBasicsSizeFiltersInput struct {
	And       []*ComponentBasicsSizeFiltersInput `json:"and,omitempty"`
	Height    *IntFilterInput                    `json:"height,omitempty"`
	Not       *ComponentBasicsSizeFiltersInput   `json:"not,omitempty"`
	Or        []*ComponentBasicsSizeFiltersInput `json:"or,omitempty"`
	Thickness *IntFilterInput                    `json:"thickness,omitempty"`
	Width     *IntFilterInput                    `json:"width,omitempty"`
}

type ComponentBasicsSizeInput struct {
	Height    *int32 `json:"height,omitempty"`
	Id        string `json:"id,omitempty"`
	Thickness *int32 `json:"thickness,omitempty"`
	Width     *int32 `json:"width,omitempty"`
}

type ComponentBasicsUrl struct {
	Id  string  `json:"id"`
	Url *string `json:"url,omitempty"`
}

func (*ComponentBasicsUrl) isGenericMorph() {}

type ComponentBasicsUrlFiltersInput struct {
	And []*ComponentBasicsUrlFiltersInput `json:"and,omitempty"`
	Not *ComponentBasicsUrlFiltersInput   `json:"not,omitempty"`
	Or  []*ComponentBasicsUrlFiltersInput `json:"or,omitempty"`
	Url *StringFilterInput                `json:"url,omitempty"`
}

type ComponentBasicsUrlInput struct {
	Id  string  `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
}

type ComponentCollectionsComponentAliases struct {
	Alias string `json:"alias"`
	Id    string `json:"id"`
}

func (*ComponentCollectionsComponentAliases) isGenericMorph() {}

type ComponentCollectionsComponentAliasesFiltersInput struct {
	Alias *StringFilterInput                                  `json:"alias,omitempty"`
	And   []*ComponentCollectionsComponentAliasesFiltersInput `json:"and,omitempty"`
	Not   *ComponentCollectionsComponentAliasesFiltersInput   `json:"not,omitempty"`
	Or    []*ComponentCollectionsComponentAliasesFiltersInput `json:"or,omitempty"`
}

type ComponentCollectionsComponentAliasesInput struct {
	Alias *string `json:"alias,omitempty"`
	Id    string  `json:"id,omitempty"`
}

type ComponentCollectionsComponentBody struct {
	Authors         *RecorderRelationResponseCollection           `json:"authors,omitempty"`
	Body            string                                        `json:"body"`
	Id              string                                        `json:"id"`
	Proofreaders    *RecorderRelationResponseCollection           `json:"proofreaders,omitempty"`
	Source_language *LanguageEntityResponse                       `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS `json:"status"`
	Translators     *RecorderRelationResponseCollection           `json:"translators,omitempty"`
}

func (*ComponentCollectionsComponentBody) isGenericMorph() {}

type ComponentCollectionsComponentBodyFiltersInput struct {
	And             []*ComponentCollectionsComponentBodyFiltersInput `json:"and,omitempty"`
	Authors         *RecorderFiltersInput                            `json:"authors,omitempty"`
	Body            *StringFilterInput                               `json:"body,omitempty"`
	Not             *ComponentCollectionsComponentBodyFiltersInput   `json:"not,omitempty"`
	Or              []*ComponentCollectionsComponentBodyFiltersInput `json:"or,omitempty"`
	Proofreaders    *RecorderFiltersInput                            `json:"proofreaders,omitempty"`
	Source_language *LanguageFiltersInput                            `json:"source_language,omitempty"`
	Status          *StringFilterInput                               `json:"status,omitempty"`
	Translators     *RecorderFiltersInput                            `json:"translators,omitempty"`
}

type ComponentCollectionsComponentBodyInput struct {
	Authors         []string                                       `json:"authors,omitempty"`
	Body            *string                                        `json:"body,omitempty"`
	Id              string                                         `json:"id,omitempty"`
	Proofreaders    []string                                       `json:"proofreaders,omitempty"`
	Source_language string                                         `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS `json:"status,omitempty"`
	Translators     []string                                       `json:"translators,omitempty"`
}

type ComponentCollectionsComponentDefinition struct {
	Definition      string                                              `json:"definition"`
	Id              string                                              `json:"id"`
	Source          *SourceEntityResponse                               `json:"source,omitempty"`
	Source_language *LanguageEntityResponse                             `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUS `json:"status"`
}

func (*ComponentCollectionsComponentDefinition) isGenericMorph() {}

type ComponentCollectionsComponentEvent struct {
	Id           string                                 `json:"id"`
	Source       *SourceEntityResponse                  `json:"source,omitempty"`
	Translations []*ComponentTranslationsChronologyItem `json:"translations,omitempty"`
}

func (*ComponentCollectionsComponentEvent) isGenericMorph() {}

type ComponentCollectionsComponentEventFiltersInput struct {
	And          []*ComponentCollectionsComponentEventFiltersInput `json:"and,omitempty"`
	Not          *ComponentCollectionsComponentEventFiltersInput   `json:"not,omitempty"`
	Or           []*ComponentCollectionsComponentEventFiltersInput `json:"or,omitempty"`
	Source       *SourceFiltersInput                               `json:"source,omitempty"`
	Translations *ComponentTranslationsChronologyItemFiltersInput  `json:"translations,omitempty"`
}

type ComponentCollectionsComponentEventInput struct {
	Id           string                                      `json:"id,omitempty"`
	Source       string                                      `json:"source,omitempty"`
	Translations []*ComponentTranslationsChronologyItemInput `json:"translations,omitempty"`
}

type ComponentCollectionsComponentGlossaryDefinition struct {
	Categories   *CategoryRelationResponseCollection        `json:"categories,omitempty"`
	Id           string                                     `json:"id"`
	Source       *SourceEntityResponse                      `json:"source,omitempty"`
	Translations []*ComponentTranslationsGlossaryDefinition `json:"translations,omitempty"`
}

func (*ComponentCollectionsComponentGlossaryDefinition) isGenericMorph() {}

type ComponentCollectionsComponentGlossaryDefinitionFiltersInput struct {
	And          []*ComponentCollectionsComponentGlossaryDefinitionFiltersInput `json:"and,omitempty"`
	Categories   *CategoryFiltersInput                                          `json:"categories,omitempty"`
	Not          *ComponentCollectionsComponentGlossaryDefinitionFiltersInput   `json:"not,omitempty"`
	Or           []*ComponentCollectionsComponentGlossaryDefinitionFiltersInput `json:"or,omitempty"`
	Source       *SourceFiltersInput                                            `json:"source,omitempty"`
	Translations *ComponentTranslationsGlossaryDefinitionFiltersInput           `json:"translations,omitempty"`
}

type ComponentCollectionsComponentGlossaryDefinitionInput struct {
	Categories   []string                                        `json:"categories,omitempty"`
	Id           string                                          `json:"id,omitempty"`
	Source       string                                          `json:"source,omitempty"`
	Translations []*ComponentTranslationsGlossaryDefinitionInput `json:"translations,omitempty"`
}

type ComponentCollectionsComponentLibraryCover struct {
	Back         *UploadFileEntityResponse `json:"back,omitempty"`
	Front        *UploadFileEntityResponse `json:"front,omitempty"`
	Full         *UploadFileEntityResponse `json:"full,omitempty"`
	Id           string                    `json:"id"`
	Inside_back  *UploadFileEntityResponse `json:"inside_back,omitempty"`
	Inside_front *UploadFileEntityResponse `json:"inside_front,omitempty"`
	Inside_full  *UploadFileEntityResponse `json:"inside_full,omitempty"`
	Spine        *UploadFileEntityResponse `json:"spine,omitempty"`
}

func (*ComponentCollectionsComponentLibraryCover) isGenericMorph() {}

type ComponentCollectionsComponentLibraryCoverFiltersInput struct {
	And []*ComponentCollectionsComponentLibraryCoverFiltersInput `json:"and,omitempty"`
	Not *ComponentCollectionsComponentLibraryCoverFiltersInput   `json:"not,omitempty"`
	Or  []*ComponentCollectionsComponentLibraryCoverFiltersInput `json:"or,omitempty"`
}

type ComponentCollectionsComponentLibraryCoverInput struct {
	Back         string `json:"back,omitempty"`
	Front        string `json:"front,omitempty"`
	Full         string `json:"full,omitempty"`
	Id           string `json:"id,omitempty"`
	Inside_back  string `json:"inside_back,omitempty"`
	Inside_front string `json:"inside_front,omitempty"`
	Inside_full  string `json:"inside_full,omitempty"`
	Spine        string `json:"spine,omitempty"`
}

type ComponentCollectionsComponentLibraryDustJacket struct {
	Back        *UploadFileEntityResponse `json:"back,omitempty"`
	Flap_back   *UploadFileEntityResponse `json:"flap_back,omitempty"`
	Flap_front  *UploadFileEntityResponse `json:"flap_front,omitempty"`
	Front       *UploadFileEntityResponse `json:"front,omitempty"`
	Full        *UploadFileEntityResponse `json:"full,omitempty"`
	Id          string                    `json:"id"`
	Inside_full *UploadFileEntityResponse `json:"inside_full,omitempty"`
	Spine       *UploadFileEntityResponse `json:"spine,omitempty"`
}

func (*ComponentCollectionsComponentLibraryDustJacket) isGenericMorph() {}

type ComponentCollectionsComponentLibraryDustJacketFiltersInput struct {
	And []*ComponentCollectionsComponentLibraryDustJacketFiltersInput `json:"and,omitempty"`
	Not *ComponentCollectionsComponentLibraryDustJacketFiltersInput   `json:"not,omitempty"`
	Or  []*ComponentCollectionsComponentLibraryDustJacketFiltersInput `json:"or,omitempty"`
}

type ComponentCollectionsComponentLibraryDustJacketInput struct {
	Back        string `json:"back,omitempty"`
	Flap_back   string `json:"flap_back,omitempty"`
	Flap_front  string `json:"flap_front,omitempty"`
	Front       string `json:"front,omitempty"`
	Full        string `json:"full,omitempty"`
	Id          string `json:"id,omitempty"`
	Inside_full string `json:"inside_full,omitempty"`
	Spine       string `json:"spine,omitempty"`
}

type ComponentCollectionsComponentLibraryImages struct {
	Cleaners        *RecorderRelationResponseCollection                    `json:"cleaners,omitempty"`
	Cover           *ComponentCollectionsComponentLibraryCover             `json:"cover,omitempty"`
	Dust_jacket     *ComponentCollectionsComponentLibraryDustJacket        `json:"dust_jacket,omitempty"`
	Id              string                                                 `json:"id"`
	Language        *LanguageEntityResponse                                `json:"language,omitempty"`
	Obi_belt        *ComponentCollectionsComponentLibraryObiBelt           `json:"obi_belt,omitempty"`
	Scanners        *RecorderRelationResponseCollection                    `json:"scanners,omitempty"`
	Source_language *LanguageEntityResponse                                `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS `json:"status"`
	Typesetters     *RecorderRelationResponseCollection                    `json:"typesetters,omitempty"`
}

func (*ComponentCollectionsComponentLibraryImages) isGenericMorph() {}

type ComponentCollectionsComponentLibraryImagesFiltersInput struct {
	And             []*ComponentCollectionsComponentLibraryImagesFiltersInput   `json:"and,omitempty"`
	Cleaners        *RecorderFiltersInput                                       `json:"cleaners,omitempty"`
	Cover           *ComponentCollectionsComponentLibraryCoverFiltersInput      `json:"cover,omitempty"`
	Dust_jacket     *ComponentCollectionsComponentLibraryDustJacketFiltersInput `json:"dust_jacket,omitempty"`
	Language        *LanguageFiltersInput                                       `json:"language,omitempty"`
	Not             *ComponentCollectionsComponentLibraryImagesFiltersInput     `json:"not,omitempty"`
	Obi_belt        *ComponentCollectionsComponentLibraryObiBeltFiltersInput    `json:"obi_belt,omitempty"`
	Or              []*ComponentCollectionsComponentLibraryImagesFiltersInput   `json:"or,omitempty"`
	Scanners        *RecorderFiltersInput                                       `json:"scanners,omitempty"`
	Source_language *LanguageFiltersInput                                       `json:"source_language,omitempty"`
	Status          *StringFilterInput                                          `json:"status,omitempty"`
	Typesetters     *RecorderFiltersInput                                       `json:"typesetters,omitempty"`
}

type ComponentCollectionsComponentLibraryImagesInput struct {
	Cleaners        []string                                                `json:"cleaners,omitempty"`
	Cover           *ComponentCollectionsComponentLibraryCoverInput         `json:"cover,omitempty"`
	Dust_jacket     *ComponentCollectionsComponentLibraryDustJacketInput    `json:"dust_jacket,omitempty"`
	Id              string                                                  `json:"id,omitempty"`
	Language        string                                                  `json:"language,omitempty"`
	Obi_belt        *ComponentCollectionsComponentLibraryObiBeltInput       `json:"obi_belt,omitempty"`
	Scanners        []string                                                `json:"scanners,omitempty"`
	Source_language string                                                  `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS `json:"status,omitempty"`
	Typesetters     []string                                                `json:"typesetters,omitempty"`
}

type ComponentCollectionsComponentLibraryObiBelt struct {
	Back        *UploadFileEntityResponse `json:"back,omitempty"`
	Flap_back   *UploadFileEntityResponse `json:"flap_back,omitempty"`
	Flap_front  *UploadFileEntityResponse `json:"flap_front,omitempty"`
	Front       *UploadFileEntityResponse `json:"front,omitempty"`
	Full        *UploadFileEntityResponse `json:"full,omitempty"`
	Id          string                    `json:"id"`
	Inside_full *UploadFileEntityResponse `json:"inside_full,omitempty"`
	Spine       *UploadFileEntityResponse `json:"spine,omitempty"`
}

func (*ComponentCollectionsComponentLibraryObiBelt) isGenericMorph() {}

type ComponentCollectionsComponentLibraryObiBeltFiltersInput struct {
	And []*ComponentCollectionsComponentLibraryObiBeltFiltersInput `json:"and,omitempty"`
	Not *ComponentCollectionsComponentLibraryObiBeltFiltersInput   `json:"not,omitempty"`
	Or  []*ComponentCollectionsComponentLibraryObiBeltFiltersInput `json:"or,omitempty"`
}

type ComponentCollectionsComponentLibraryObiBeltInput struct {
	Back        string `json:"back,omitempty"`
	Flap_back   string `json:"flap_back,omitempty"`
	Flap_front  string `json:"flap_front,omitempty"`
	Front       string `json:"front,omitempty"`
	Full        string `json:"full,omitempty"`
	Id          string `json:"id,omitempty"`
	Inside_full string `json:"inside_full,omitempty"`
	Spine       string `json:"spine,omitempty"`
}

type ComponentCollectionsComponentTitles struct {
	Id    string `json:"id"`
	Title string `json:"title"`
}

func (*ComponentCollectionsComponentTitles) isGenericMorph() {}

type ComponentCollectionsComponentTitlesFiltersInput struct {
	And   []*ComponentCollectionsComponentTitlesFiltersInput `json:"and,omitempty"`
	Not   *ComponentCollectionsComponentTitlesFiltersInput   `json:"not,omitempty"`
	Or    []*ComponentCollectionsComponentTitlesFiltersInput `json:"or,omitempty"`
	Title *StringFilterInput                                 `json:"title,omitempty"`
}

type ComponentCollectionsComponentWeaponStory struct {
	Categories   *CategoryRelationResponseCollection      `json:"categories,omitempty"`
	Id           string                                   `json:"id"`
	Source       *SourceEntityResponse                    `json:"source,omitempty"`
	Translations []*ComponentTranslationsWeaponStoryStory `json:"translations,omitempty"`
}

func (*ComponentCollectionsComponentWeaponStory) isGenericMorph() {}

type ComponentCollectionsComponentWeaponStoryFiltersInput struct {
	And          []*ComponentCollectionsComponentWeaponStoryFiltersInput `json:"and,omitempty"`
	Categories   *CategoryFiltersInput                                   `json:"categories,omitempty"`
	Not          *ComponentCollectionsComponentWeaponStoryFiltersInput   `json:"not,omitempty"`
	Or           []*ComponentCollectionsComponentWeaponStoryFiltersInput `json:"or,omitempty"`
	Source       *SourceFiltersInput                                     `json:"source,omitempty"`
	Translations *ComponentTranslationsWeaponStoryStoryFiltersInput      `json:"translations,omitempty"`
}

type ComponentCollectionsComponentWeaponStoryInput struct {
	Categories   []string                                      `json:"categories,omitempty"`
	Id           string                                        `json:"id,omitempty"`
	Source       string                                        `json:"source,omitempty"`
	Translations []*ComponentTranslationsWeaponStoryStoryInput `json:"translations,omitempty"`
}

type ComponentCollectionsComponentWikiDefinition struct {
	Categories *CategoryRelationResponseCollection `json:"categories,omitempty"`
	Definition *string                             `json:"definition,omitempty"`
	Id         string                              `json:"id"`
	Source     *SourceEntityResponse               `json:"source,omitempty"`
}

func (*ComponentCollectionsComponentWikiDefinition) isGenericMorph() {}

type ComponentMetadataAudio struct {
	Id      string                      `json:"id"`
	Subtype *AudioSubtypeEntityResponse `json:"subtype,omitempty"`
	Tracks  []*ComponentSetsTrackSet    `json:"tracks,omitempty"`
}

func (*ComponentMetadataAudio) isGenericMorph() {}

func (*ComponentMetadataAudio) isLibraryItemMetadataDynamicZone() {}

type ComponentMetadataBooks struct {
	Binding_type *ENUM_COMPONENTMETADATABOOKS_BINDING_TYPE `json:"binding_type,omitempty"`
	Id           string                                    `json:"id"`
	Languages    *LanguageRelationResponseCollection       `json:"languages,omitempty"`
	Page_count   *int32                                    `json:"page_count,omitempty"`
	Page_order   ENUM_COMPONENTMETADATABOOKS_PAGE_ORDER    `json:"page_order"`
	Subtype      *TextualSubtypeEntityResponse             `json:"subtype,omitempty"`
}

func (*ComponentMetadataBooks) isGenericMorph() {}

func (*ComponentMetadataBooks) isLibraryItemMetadataDynamicZone() {}

type ComponentMetadataGame struct {
	Audio_languages     *LanguageRelationResponseCollection     `json:"audio_languages,omitempty"`
	Demo                bool                                    `json:"demo"`
	Id                  string                                  `json:"id"`
	Interface_languages *LanguageRelationResponseCollection     `json:"interface_languages,omitempty"`
	Platform            *GamePlatformEntityResponse             `json:"platform,omitempty"`
	Platforms           *GamePlatformRelationResponseCollection `json:"platforms,omitempty"`
	Sub_languages       *LanguageRelationResponseCollection     `json:"sub_languages,omitempty"`
}

func (*ComponentMetadataGame) isGenericMorph() {}

func (*ComponentMetadataGame) isLibraryItemMetadataDynamicZone() {}

type ComponentMetadataGroup struct {
	Id            string                      `json:"id"`
	Subitems_type *MetadataTypeEntityResponse `json:"subitems_type,omitempty"`
	Subtype       *GroupSubtypeEntityResponse `json:"subtype,omitempty"`
}

func (*ComponentMetadataGroup) isGenericMorph() {}

func (*ComponentMetadataGroup) isLibraryItemMetadataDynamicZone() {}

type ComponentMetadataMerch struct {
	Id         string                   `json:"id"`
	Merch_item *MerchItemEntityResponse `json:"merch_item,omitempty"`
}

func (*ComponentMetadataMerch) isGenericMorph() {}

type ComponentMetadataOther struct {
	Id string `json:"id"`
}

func (*ComponentMetadataOther) isGenericMorph() {}

func (*ComponentMetadataOther) isLibraryItemMetadataDynamicZone() {}

type ComponentMetadataVideo struct {
	Id      string                      `json:"id"`
	Subtype *VideoSubtypeEntityResponse `json:"subtype,omitempty"`
}

func (*ComponentMetadataVideo) isGenericMorph() {}

func (*ComponentMetadataVideo) isLibraryItemMetadataDynamicZone() {}

type ComponentPageBuilderGallery struct {
	Gallery *UploadFileRelationResponseCollection `json:"gallery,omitempty"`
	Id      string                                `json:"id"`
}

func (*ComponentPageBuilderGallery) isGenericMorph() {}

type ComponentPageBuilderGrid struct {
	Column_count int32  `json:"column_count"`
	Id           string `json:"id"`
}

func (*ComponentPageBuilderGrid) isGenericMorph() {}

type ComponentPageBuilderTabs struct {
	Id string `json:"id"`
}

func (*ComponentPageBuilderTabs) isGenericMorph() {}

type ComponentRangeGameAspect struct {
	Id   string  `json:"id"`
	Note *string `json:"note,omitempty"`
}

func (*ComponentRangeGameAspect) isGenericMorph() {}

type ComponentRangeOther struct {
	Id   string  `json:"id"`
	Note *string `json:"note,omitempty"`
}

func (*ComponentRangeOther) isGenericMorph() {}

func (*ComponentRangeOther) isRangedContentRangeDynamicZone() {}

type ComponentRangePageRange struct {
	Ending_page   int32  `json:"ending_page"`
	Id            string `json:"id"`
	Starting_page int32  `json:"starting_page"`
}

func (*ComponentRangePageRange) isGenericMorph() {}

func (*ComponentRangePageRange) isRangedContentRangeDynamicZone() {}

type ComponentRangeTimeRange struct {
	Ending_time   gqlclient.Time `json:"ending_time,omitempty"`
	Id            string         `json:"id"`
	Starting_time gqlclient.Time `json:"starting_time,omitempty"`
}

func (*ComponentRangeTimeRange) isGenericMorph() {}

func (*ComponentRangeTimeRange) isRangedContentRangeDynamicZone() {}

type ComponentSetsAudioSet struct {
	Dubbers         *RecorderRelationResponseCollection `json:"dubbers,omitempty"`
	Id              string                              `json:"id"`
	Notes           *string                             `json:"notes,omitempty"`
	Source_language *LanguageEntityResponse             `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTSETSAUDIOSET_STATUS  `json:"status,omitempty"`
}

func (*ComponentSetsAudioSet) isGenericMorph() {}

type ComponentSetsAudioSetFiltersInput struct {
	And             []*ComponentSetsAudioSetFiltersInput `json:"and,omitempty"`
	Dubbers         *RecorderFiltersInput                `json:"dubbers,omitempty"`
	Not             *ComponentSetsAudioSetFiltersInput   `json:"not,omitempty"`
	Notes           *StringFilterInput                   `json:"notes,omitempty"`
	Or              []*ComponentSetsAudioSetFiltersInput `json:"or,omitempty"`
	Source_language *LanguageFiltersInput                `json:"source_language,omitempty"`
	Status          *StringFilterInput                   `json:"status,omitempty"`
}

type ComponentSetsAudioSetInput struct {
	Dubbers         []string                           `json:"dubbers,omitempty"`
	Id              string                             `json:"id,omitempty"`
	Notes           *string                            `json:"notes,omitempty"`
	Source_language string                             `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTSETSAUDIOSET_STATUS `json:"status,omitempty"`
}

type ComponentSetsScanSet struct {
	Cleaners        *RecorderRelationResponseCollection   `json:"cleaners,omitempty"`
	Id              string                                `json:"id"`
	Language        *LanguageEntityResponse               `json:"language,omitempty"`
	Notes           *string                               `json:"notes,omitempty"`
	Pages           *UploadFileRelationResponseCollection `json:"pages,omitempty"`
	Scanners        *RecorderRelationResponseCollection   `json:"scanners,omitempty"`
	Source_language *LanguageEntityResponse               `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTSETSSCANSET_STATUS      `json:"status"`
	Typesetters     *RecorderRelationResponseCollection   `json:"typesetters,omitempty"`
}

func (*ComponentSetsScanSet) isGenericMorph() {}

type ComponentSetsScanSetFiltersInput struct {
	And             []*ComponentSetsScanSetFiltersInput `json:"and,omitempty"`
	Cleaners        *RecorderFiltersInput               `json:"cleaners,omitempty"`
	Language        *LanguageFiltersInput               `json:"language,omitempty"`
	Not             *ComponentSetsScanSetFiltersInput   `json:"not,omitempty"`
	Notes           *StringFilterInput                  `json:"notes,omitempty"`
	Or              []*ComponentSetsScanSetFiltersInput `json:"or,omitempty"`
	Scanners        *RecorderFiltersInput               `json:"scanners,omitempty"`
	Source_language *LanguageFiltersInput               `json:"source_language,omitempty"`
	Status          *StringFilterInput                  `json:"status,omitempty"`
	Typesetters     *RecorderFiltersInput               `json:"typesetters,omitempty"`
}

type ComponentSetsScanSetInput struct {
	Cleaners        []string                          `json:"cleaners,omitempty"`
	Id              string                            `json:"id,omitempty"`
	Language        string                            `json:"language,omitempty"`
	Notes           *string                           `json:"notes,omitempty"`
	Pages           []string                          `json:"pages,omitempty"`
	Scanners        []string                          `json:"scanners,omitempty"`
	Source_language string                            `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTSETSSCANSET_STATUS `json:"status,omitempty"`
	Typesetters     []string                          `json:"typesetters,omitempty"`
}

type ComponentSetsTextSet struct {
	Id              string                              `json:"id"`
	Notes           *string                             `json:"notes,omitempty"`
	Proofreaders    *RecorderRelationResponseCollection `json:"proofreaders,omitempty"`
	Source_language *LanguageEntityResponse             `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTSETSTEXTSET_STATUS    `json:"status"`
	Text            *string                             `json:"text,omitempty"`
	Transcribers    *RecorderRelationResponseCollection `json:"transcribers,omitempty"`
	Translators     *RecorderRelationResponseCollection `json:"translators,omitempty"`
}

func (*ComponentSetsTextSet) isGenericMorph() {}

type ComponentSetsTextSetFiltersInput struct {
	And             []*ComponentSetsTextSetFiltersInput `json:"and,omitempty"`
	Not             *ComponentSetsTextSetFiltersInput   `json:"not,omitempty"`
	Notes           *StringFilterInput                  `json:"notes,omitempty"`
	Or              []*ComponentSetsTextSetFiltersInput `json:"or,omitempty"`
	Proofreaders    *RecorderFiltersInput               `json:"proofreaders,omitempty"`
	Source_language *LanguageFiltersInput               `json:"source_language,omitempty"`
	Status          *StringFilterInput                  `json:"status,omitempty"`
	Text            *StringFilterInput                  `json:"text,omitempty"`
	Transcribers    *RecorderFiltersInput               `json:"transcribers,omitempty"`
	Translators     *RecorderFiltersInput               `json:"translators,omitempty"`
}

type ComponentSetsTextSetInput struct {
	Id              string                            `json:"id,omitempty"`
	Notes           *string                           `json:"notes,omitempty"`
	Proofreaders    []string                          `json:"proofreaders,omitempty"`
	Source_language string                            `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTSETSTEXTSET_STATUS `json:"status,omitempty"`
	Text            *string                           `json:"text,omitempty"`
	Transcribers    []string                          `json:"transcribers,omitempty"`
	Translators     []string                          `json:"translators,omitempty"`
}

type ComponentSetsTrackSet struct {
	Id    string `json:"id"`
	Slug  string `json:"slug"`
	Title string `json:"title"`
}

func (*ComponentSetsTrackSet) isGenericMorph() {}

type ComponentSetsTrackSetFiltersInput struct {
	And   []*ComponentSetsTrackSetFiltersInput `json:"and,omitempty"`
	Not   *ComponentSetsTrackSetFiltersInput   `json:"not,omitempty"`
	Or    []*ComponentSetsTrackSetFiltersInput `json:"or,omitempty"`
	Slug  *StringFilterInput                   `json:"slug,omitempty"`
	Title *StringFilterInput                   `json:"title,omitempty"`
}

type ComponentSetsVideoSet struct {
	Has_subfile     bool                                `json:"has_subfile"`
	Id              string                              `json:"id"`
	Notes           *string                             `json:"notes,omitempty"`
	Source_language *LanguageEntityResponse             `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTSETSVIDEOSET_STATUS   `json:"status"`
	Subbers         *RecorderRelationResponseCollection `json:"subbers,omitempty"`
}

func (*ComponentSetsVideoSet) isGenericMorph() {}

type ComponentSetsVideoSetFiltersInput struct {
	And             []*ComponentSetsVideoSetFiltersInput `json:"and,omitempty"`
	Has_subfile     *BooleanFilterInput                  `json:"has_subfile,omitempty"`
	Not             *ComponentSetsVideoSetFiltersInput   `json:"not,omitempty"`
	Notes           *StringFilterInput                   `json:"notes,omitempty"`
	Or              []*ComponentSetsVideoSetFiltersInput `json:"or,omitempty"`
	Source_language *LanguageFiltersInput                `json:"source_language,omitempty"`
	Status          *StringFilterInput                   `json:"status,omitempty"`
	Subbers         *RecorderFiltersInput                `json:"subbers,omitempty"`
}

type ComponentSetsVideoSetInput struct {
	Has_subfile     *bool                              `json:"has_subfile,omitempty"`
	Id              string                             `json:"id,omitempty"`
	Notes           *string                            `json:"notes,omitempty"`
	Source_language string                             `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTSETSVIDEOSET_STATUS `json:"status,omitempty"`
	Subbers         []string                           `json:"subbers,omitempty"`
}

type ComponentSetsWikiSet struct {
	Body            *string                                `json:"body,omitempty"`
	Id              string                                 `json:"id"`
	Language        *LanguageEntityResponse                `json:"language,omitempty"`
	Proofreaders    *RecorderRelationResponseCollection    `json:"proofreaders,omitempty"`
	Source_language *LanguageEntityResponse                `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTSETSWIKISET_STATUS       `json:"status"`
	Summary         *string                                `json:"summary,omitempty"`
	Titles          []*ComponentCollectionsComponentTitles `json:"titles,omitempty"`
	Translators     *RecorderRelationResponseCollection    `json:"translators,omitempty"`
}

func (*ComponentSetsWikiSet) isGenericMorph() {}

type ComponentSourceUrlSource struct {
	Credits *ComponentBasicsCredits `json:"credits"`
	Id      string                  `json:"id"`
	Note    *string                 `json:"note,omitempty"`
	Title   *string                 `json:"title,omitempty"`
	Url     *string                 `json:"url,omitempty"`
}

func (*ComponentSourceUrlSource) isGenericMorph() {}

type ComponentTranslationsAudioSets struct {
	Audiofile *UploadFileEntityResponse                  `json:"audiofile"`
	Credits   *ComponentBasicsCredits                    `json:"credits"`
	Id        string                                     `json:"id"`
	Language  *LanguageEntityResponse                    `json:"language,omitempty"`
	Status    ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS `json:"status"`
}

func (*ComponentTranslationsAudioSets) isGenericMorph() {}

type ComponentTranslationsBio struct {
	Bio      *string                 `json:"bio,omitempty"`
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
}

func (*ComponentTranslationsBio) isGenericMorph() {}

type ComponentTranslationsBioFiltersInput struct {
	And      []*ComponentTranslationsBioFiltersInput `json:"and,omitempty"`
	Bio      *StringFilterInput                      `json:"bio,omitempty"`
	Language *LanguageFiltersInput                   `json:"language,omitempty"`
	Not      *ComponentTranslationsBioFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsBioFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsBioInput struct {
	Bio      *string `json:"bio,omitempty"`
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
}

type ComponentTranslationsCategoriesTitle struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Short    *string                 `json:"short,omitempty"`
	Title    *string                 `json:"title,omitempty"`
}

func (*ComponentTranslationsCategoriesTitle) isGenericMorph() {}

type ComponentTranslationsCategoriesTitleFiltersInput struct {
	And      []*ComponentTranslationsCategoriesTitleFiltersInput `json:"and,omitempty"`
	Language *LanguageFiltersInput                               `json:"language,omitempty"`
	Not      *ComponentTranslationsCategoriesTitleFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsCategoriesTitleFiltersInput `json:"or,omitempty"`
	Short    *StringFilterInput                                  `json:"short,omitempty"`
	Title    *StringFilterInput                                  `json:"title,omitempty"`
}

type ComponentTranslationsCategoriesTitleInput struct {
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
	Short    *string `json:"short,omitempty"`
	Title    *string `json:"title,omitempty"`
}

type ComponentTranslationsChronicles struct {
	Body     *ComponentCollectionsComponentBody `json:"body,omitempty"`
	Id       string                             `json:"id"`
	Language *LanguageEntityResponse            `json:"language,omitempty"`
	Summary  *string                            `json:"summary,omitempty"`
	Title    string                             `json:"title"`
}

func (*ComponentTranslationsChronicles) isGenericMorph() {}

type ComponentTranslationsChroniclesFiltersInput struct {
	And      []*ComponentTranslationsChroniclesFiltersInput `json:"and,omitempty"`
	Body     *ComponentCollectionsComponentBodyFiltersInput `json:"body,omitempty"`
	Language *LanguageFiltersInput                          `json:"language,omitempty"`
	Not      *ComponentTranslationsChroniclesFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsChroniclesFiltersInput `json:"or,omitempty"`
	Summary  *StringFilterInput                             `json:"summary,omitempty"`
	Title    *StringFilterInput                             `json:"title,omitempty"`
}

type ComponentTranslationsChroniclesInput struct {
	Body     *ComponentCollectionsComponentBodyInput `json:"body,omitempty"`
	Id       string                                  `json:"id,omitempty"`
	Language string                                  `json:"language,omitempty"`
	Summary  *string                                 `json:"summary,omitempty"`
	Title    *string                                 `json:"title,omitempty"`
}

type ComponentTranslationsChronologyEra struct {
	Description *string                 `json:"description,omitempty"`
	Id          string                  `json:"id"`
	Language    *LanguageEntityResponse `json:"language,omitempty"`
	Title       string                  `json:"title"`
}

func (*ComponentTranslationsChronologyEra) isGenericMorph() {}

type ComponentTranslationsChronologyEraFiltersInput struct {
	And         []*ComponentTranslationsChronologyEraFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                                `json:"description,omitempty"`
	Language    *LanguageFiltersInput                             `json:"language,omitempty"`
	Not         *ComponentTranslationsChronologyEraFiltersInput   `json:"not,omitempty"`
	Or          []*ComponentTranslationsChronologyEraFiltersInput `json:"or,omitempty"`
	Title       *StringFilterInput                                `json:"title,omitempty"`
}

type ComponentTranslationsChronologyEraInput struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id,omitempty"`
	Language    string  `json:"language,omitempty"`
	Title       *string `json:"title,omitempty"`
}

type ComponentTranslationsChronologyItem struct {
	Description *string                                         `json:"description,omitempty"`
	Id          string                                          `json:"id"`
	Language    *LanguageEntityResponse                         `json:"language,omitempty"`
	Note        *string                                         `json:"note,omitempty"`
	Status      ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS `json:"status"`
	Title       *string                                         `json:"title,omitempty"`
}

func (*ComponentTranslationsChronologyItem) isGenericMorph() {}

type ComponentTranslationsChronologyItemFiltersInput struct {
	And         []*ComponentTranslationsChronologyItemFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                                 `json:"description,omitempty"`
	Language    *LanguageFiltersInput                              `json:"language,omitempty"`
	Not         *ComponentTranslationsChronologyItemFiltersInput   `json:"not,omitempty"`
	Note        *StringFilterInput                                 `json:"note,omitempty"`
	Or          []*ComponentTranslationsChronologyItemFiltersInput `json:"or,omitempty"`
	Status      *StringFilterInput                                 `json:"status,omitempty"`
	Title       *StringFilterInput                                 `json:"title,omitempty"`
}

type ComponentTranslationsChronologyItemInput struct {
	Description *string                                          `json:"description,omitempty"`
	Id          string                                           `json:"id,omitempty"`
	Language    string                                           `json:"language,omitempty"`
	Note        *string                                          `json:"note,omitempty"`
	Status      *ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS `json:"status,omitempty"`
	Title       *string                                          `json:"title,omitempty"`
}

type ComponentTranslationsGamePlatformsTranslations struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Short    *string                 `json:"short,omitempty"`
	Title    *string                 `json:"title,omitempty"`
}

func (*ComponentTranslationsGamePlatformsTranslations) isGenericMorph() {}

type ComponentTranslationsGamePlatformsTranslationsFiltersInput struct {
	And      []*ComponentTranslationsGamePlatformsTranslationsFiltersInput `json:"and,omitempty"`
	Language *LanguageFiltersInput                                         `json:"language,omitempty"`
	Not      *ComponentTranslationsGamePlatformsTranslationsFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsGamePlatformsTranslationsFiltersInput `json:"or,omitempty"`
	Short    *StringFilterInput                                            `json:"short,omitempty"`
	Title    *StringFilterInput                                            `json:"title,omitempty"`
}

type ComponentTranslationsGamePlatformsTranslationsInput struct {
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
	Short    *string `json:"short,omitempty"`
	Title    *string `json:"title,omitempty"`
}

type ComponentTranslationsGlossaryDefinition struct {
	Definition      *string                                             `json:"definition,omitempty"`
	Id              string                                              `json:"id"`
	Language        *LanguageEntityResponse                             `json:"language,omitempty"`
	Proofreaders    *RecorderRelationResponseCollection                 `json:"proofreaders,omitempty"`
	Source_language *LanguageEntityResponse                             `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS `json:"status"`
	Transcribers    *RecorderRelationResponseCollection                 `json:"transcribers,omitempty"`
	Translators     *RecorderRelationResponseCollection                 `json:"translators,omitempty"`
}

func (*ComponentTranslationsGlossaryDefinition) isGenericMorph() {}

type ComponentTranslationsGlossaryDefinitionFiltersInput struct {
	And             []*ComponentTranslationsGlossaryDefinitionFiltersInput `json:"and,omitempty"`
	Definition      *StringFilterInput                                     `json:"definition,omitempty"`
	Language        *LanguageFiltersInput                                  `json:"language,omitempty"`
	Not             *ComponentTranslationsGlossaryDefinitionFiltersInput   `json:"not,omitempty"`
	Or              []*ComponentTranslationsGlossaryDefinitionFiltersInput `json:"or,omitempty"`
	Proofreaders    *RecorderFiltersInput                                  `json:"proofreaders,omitempty"`
	Source_language *LanguageFiltersInput                                  `json:"source_language,omitempty"`
	Status          *StringFilterInput                                     `json:"status,omitempty"`
	Transcribers    *RecorderFiltersInput                                  `json:"transcribers,omitempty"`
	Translators     *RecorderFiltersInput                                  `json:"translators,omitempty"`
}

type ComponentTranslationsGlossaryDefinitionInput struct {
	Definition      *string                                              `json:"definition,omitempty"`
	Id              string                                               `json:"id,omitempty"`
	Language        string                                               `json:"language,omitempty"`
	Proofreaders    []string                                             `json:"proofreaders,omitempty"`
	Source_language string                                               `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS `json:"status,omitempty"`
	Transcribers    []string                                             `json:"transcribers,omitempty"`
	Translators     []string                                             `json:"translators,omitempty"`
}

type ComponentTranslationsGlossaryItem struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Title    *string                 `json:"title,omitempty"`
}

func (*ComponentTranslationsGlossaryItem) isGenericMorph() {}

type ComponentTranslationsGlossaryItemFiltersInput struct {
	And      []*ComponentTranslationsGlossaryItemFiltersInput `json:"and,omitempty"`
	Language *LanguageFiltersInput                            `json:"language,omitempty"`
	Not      *ComponentTranslationsGlossaryItemFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsGlossaryItemFiltersInput `json:"or,omitempty"`
	Title    *StringFilterInput                               `json:"title,omitempty"`
}

type ComponentTranslationsGlossaryItemInput struct {
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
	Title    *string `json:"title,omitempty"`
}

type ComponentTranslationsLibraryContent struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Title    *string                 `json:"title,omitempty"`
}

func (*ComponentTranslationsLibraryContent) isGenericMorph() {}

type ComponentTranslationsLibraryItems struct {
	Description string                  `json:"description"`
	Id          string                  `json:"id"`
	Language    *LanguageEntityResponse `json:"language,omitempty"`
}

func (*ComponentTranslationsLibraryItems) isGenericMorph() {}

type ComponentTranslationsLibraryItemsFiltersInput struct {
	And         []*ComponentTranslationsLibraryItemsFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                               `json:"description,omitempty"`
	Language    *LanguageFiltersInput                            `json:"language,omitempty"`
	Not         *ComponentTranslationsLibraryItemsFiltersInput   `json:"not,omitempty"`
	Or          []*ComponentTranslationsLibraryItemsFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsLibraryItemsInput struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id,omitempty"`
	Language    string  `json:"language,omitempty"`
}

type ComponentTranslationsPosts struct {
	Body            *string                                `json:"body,omitempty"`
	Excerpt         *string                                `json:"excerpt,omitempty"`
	Id              string                                 `json:"id"`
	Language        *LanguageEntityResponse                `json:"language,omitempty"`
	Proofreaders    *RecorderRelationResponseCollection    `json:"proofreaders,omitempty"`
	Source_language *LanguageEntityResponse                `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS `json:"status"`
	Thumbnail       *UploadFileEntityResponse              `json:"thumbnail,omitempty"`
	Title           string                                 `json:"title"`
	Translators     *RecorderRelationResponseCollection    `json:"translators,omitempty"`
}

func (*ComponentTranslationsPosts) isGenericMorph() {}

type ComponentTranslationsPostsFiltersInput struct {
	And             []*ComponentTranslationsPostsFiltersInput `json:"and,omitempty"`
	Body            *StringFilterInput                        `json:"body,omitempty"`
	Excerpt         *StringFilterInput                        `json:"excerpt,omitempty"`
	Language        *LanguageFiltersInput                     `json:"language,omitempty"`
	Not             *ComponentTranslationsPostsFiltersInput   `json:"not,omitempty"`
	Or              []*ComponentTranslationsPostsFiltersInput `json:"or,omitempty"`
	Proofreaders    *RecorderFiltersInput                     `json:"proofreaders,omitempty"`
	Source_language *LanguageFiltersInput                     `json:"source_language,omitempty"`
	Status          *StringFilterInput                        `json:"status,omitempty"`
	Title           *StringFilterInput                        `json:"title,omitempty"`
	Translators     *RecorderFiltersInput                     `json:"translators,omitempty"`
}

type ComponentTranslationsPostsInput struct {
	Body            *string                                 `json:"body,omitempty"`
	Excerpt         *string                                 `json:"excerpt,omitempty"`
	Id              string                                  `json:"id,omitempty"`
	Language        string                                  `json:"language,omitempty"`
	Proofreaders    []string                                `json:"proofreaders,omitempty"`
	Source_language string                                  `json:"source_language,omitempty"`
	Status          *ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS `json:"status,omitempty"`
	Thumbnail       string                                  `json:"thumbnail,omitempty"`
	Title           *string                                 `json:"title,omitempty"`
	Translators     []string                                `json:"translators,omitempty"`
}

type ComponentTranslationsReinCostumes struct {
	Description string                  `json:"description"`
	Id          string                  `json:"id"`
	Language    *LanguageEntityResponse `json:"language,omitempty"`
	Name        string                  `json:"name"`
}

func (*ComponentTranslationsReinCostumes) isGenericMorph() {}

type ComponentTranslationsReinCostumesFiltersInput struct {
	And         []*ComponentTranslationsReinCostumesFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                               `json:"description,omitempty"`
	Language    *LanguageFiltersInput                            `json:"language,omitempty"`
	Name        *StringFilterInput                               `json:"name,omitempty"`
	Not         *ComponentTranslationsReinCostumesFiltersInput   `json:"not,omitempty"`
	Or          []*ComponentTranslationsReinCostumesFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsReinCostumesInput struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id,omitempty"`
	Language    string  `json:"language,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type ComponentTranslationsReinEmblems struct {
	Description string                  `json:"description"`
	Id          string                  `json:"id"`
	Language    *LanguageEntityResponse `json:"language,omitempty"`
	Name        string                  `json:"name"`
}

func (*ComponentTranslationsReinEmblems) isGenericMorph() {}

type ComponentTranslationsReinEmblemsFiltersInput struct {
	And         []*ComponentTranslationsReinEmblemsFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                              `json:"description,omitempty"`
	Language    *LanguageFiltersInput                           `json:"language,omitempty"`
	Name        *StringFilterInput                              `json:"name,omitempty"`
	Not         *ComponentTranslationsReinEmblemsFiltersInput   `json:"not,omitempty"`
	Or          []*ComponentTranslationsReinEmblemsFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsReinEmblemsInput struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id,omitempty"`
	Language    string  `json:"language,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type ComponentTranslationsScanSet struct {
	Credits  *ComponentBasicsCredits                  `json:"credits"`
	Id       string                                   `json:"id"`
	Language *LanguageEntityResponse                  `json:"language,omitempty"`
	Pages    *UploadFileRelationResponseCollection    `json:"pages"`
	Status   ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS `json:"status"`
}

func (*ComponentTranslationsScanSet) isGenericMorph() {}

type ComponentTranslationsSimpleTitle struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Title    string                  `json:"title"`
}

func (*ComponentTranslationsSimpleTitle) isGenericMorph() {}

type ComponentTranslationsSimpleTitleFiltersInput struct {
	And      []*ComponentTranslationsSimpleTitleFiltersInput `json:"and,omitempty"`
	Language *LanguageFiltersInput                           `json:"language,omitempty"`
	Not      *ComponentTranslationsSimpleTitleFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsSimpleTitleFiltersInput `json:"or,omitempty"`
	Title    *StringFilterInput                              `json:"title,omitempty"`
}

type ComponentTranslationsSimpleTitleInput struct {
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
	Title    *string `json:"title,omitempty"`
}

type ComponentTranslationsTextSet struct {
	Credits  *ComponentBasicsCredits                  `json:"credits"`
	Id       string                                   `json:"id"`
	Language *LanguageEntityResponse                  `json:"language,omitempty"`
	Status   ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS `json:"status"`
	Text     *string                                  `json:"text,omitempty"`
}

func (*ComponentTranslationsTextSet) isGenericMorph() {}

type ComponentTranslationsTitle struct {
	Audio_set   *ComponentSetsAudioSet  `json:"audio_set,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Id          string                  `json:"id"`
	Language    *LanguageEntityResponse `json:"language,omitempty"`
	Pre_title   *string                 `json:"pre_title,omitempty"`
	Subtitle    *string                 `json:"subtitle,omitempty"`
	Text_set    *ComponentSetsTextSet   `json:"text_set,omitempty"`
	Title       string                  `json:"title"`
	Video_set   *ComponentSetsVideoSet  `json:"video_set,omitempty"`
}

func (*ComponentTranslationsTitle) isGenericMorph() {}

type ComponentTranslationsTitleFiltersInput struct {
	And         []*ComponentTranslationsTitleFiltersInput `json:"and,omitempty"`
	Audio_set   *ComponentSetsAudioSetFiltersInput        `json:"audio_set,omitempty"`
	Description *StringFilterInput                        `json:"description,omitempty"`
	Language    *LanguageFiltersInput                     `json:"language,omitempty"`
	Not         *ComponentTranslationsTitleFiltersInput   `json:"not,omitempty"`
	Or          []*ComponentTranslationsTitleFiltersInput `json:"or,omitempty"`
	Pre_title   *StringFilterInput                        `json:"pre_title,omitempty"`
	Subtitle    *StringFilterInput                        `json:"subtitle,omitempty"`
	Text_set    *ComponentSetsTextSetFiltersInput         `json:"text_set,omitempty"`
	Title       *StringFilterInput                        `json:"title,omitempty"`
	Video_set   *ComponentSetsVideoSetFiltersInput        `json:"video_set,omitempty"`
}

type ComponentTranslationsTitleInput struct {
	Audio_set   *ComponentSetsAudioSetInput `json:"audio_set,omitempty"`
	Description *string                     `json:"description,omitempty"`
	Id          string                      `json:"id,omitempty"`
	Language    string                      `json:"language,omitempty"`
	Pre_title   *string                     `json:"pre_title,omitempty"`
	Subtitle    *string                     `json:"subtitle,omitempty"`
	Text_set    *ComponentSetsTextSetInput  `json:"text_set,omitempty"`
	Title       *string                     `json:"title,omitempty"`
	Video_set   *ComponentSetsVideoSetInput `json:"video_set,omitempty"`
}

type ComponentTranslationsVideoSets struct {
	Credits     *ComponentBasicsCredits                    `json:"credits"`
	Id          string                                     `json:"id"`
	Language    *LanguageEntityResponse                    `json:"language,omitempty"`
	Status      ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS `json:"status"`
	Subfile     *UploadFileEntityResponse                  `json:"subfile,omitempty"`
	Video_embed *string                                    `json:"video_embed,omitempty"`
	Video_url   string                                     `json:"video_url"`
}

func (*ComponentTranslationsVideoSets) isGenericMorph() {}

type ComponentTranslationsWeaponStory struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Name     *string                 `json:"name,omitempty"`
}

func (*ComponentTranslationsWeaponStory) isGenericMorph() {}

type ComponentTranslationsWeaponStoryFiltersInput struct {
	And      []*ComponentTranslationsWeaponStoryFiltersInput `json:"and,omitempty"`
	Language *LanguageFiltersInput                           `json:"language,omitempty"`
	Name     *StringFilterInput                              `json:"name,omitempty"`
	Not      *ComponentTranslationsWeaponStoryFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsWeaponStoryFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsWeaponStoryInput struct {
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
	Name     *string `json:"name,omitempty"`
}

type ComponentTranslationsWeaponStoryStory struct {
	Description *string                                           `json:"description,omitempty"`
	Id          string                                            `json:"id"`
	Language    *LanguageEntityResponse                           `json:"language,omitempty"`
	Level_1     *string                                           `json:"level_1,omitempty"`
	Level_2     *string                                           `json:"level_2,omitempty"`
	Level_3     *string                                           `json:"level_3,omitempty"`
	Level_4     *string                                           `json:"level_4,omitempty"`
	Status      ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS `json:"status"`
}

func (*ComponentTranslationsWeaponStoryStory) isGenericMorph() {}

type ComponentTranslationsWeaponStoryStoryFiltersInput struct {
	And         []*ComponentTranslationsWeaponStoryStoryFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                                   `json:"description,omitempty"`
	Language    *LanguageFiltersInput                                `json:"language,omitempty"`
	Level_1     *StringFilterInput                                   `json:"level_1,omitempty"`
	Level_2     *StringFilterInput                                   `json:"level_2,omitempty"`
	Level_3     *StringFilterInput                                   `json:"level_3,omitempty"`
	Level_4     *StringFilterInput                                   `json:"level_4,omitempty"`
	Not         *ComponentTranslationsWeaponStoryStoryFiltersInput   `json:"not,omitempty"`
	Or          []*ComponentTranslationsWeaponStoryStoryFiltersInput `json:"or,omitempty"`
	Status      *StringFilterInput                                   `json:"status,omitempty"`
}

type ComponentTranslationsWeaponStoryStoryInput struct {
	Description *string                                            `json:"description,omitempty"`
	Id          string                                             `json:"id,omitempty"`
	Language    string                                             `json:"language,omitempty"`
	Level_1     *string                                            `json:"level_1,omitempty"`
	Level_2     *string                                            `json:"level_2,omitempty"`
	Level_3     *string                                            `json:"level_3,omitempty"`
	Level_4     *string                                            `json:"level_4,omitempty"`
	Status      *ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS `json:"status,omitempty"`
}

type ComponentTranslationsWeaponStoryType struct {
	Id       string                  `json:"id"`
	Language *LanguageEntityResponse `json:"language,omitempty"`
	Name     *string                 `json:"name,omitempty"`
}

func (*ComponentTranslationsWeaponStoryType) isGenericMorph() {}

type ComponentTranslationsWeaponStoryTypeFiltersInput struct {
	And      []*ComponentTranslationsWeaponStoryTypeFiltersInput `json:"and,omitempty"`
	Language *LanguageFiltersInput                               `json:"language,omitempty"`
	Name     *StringFilterInput                                  `json:"name,omitempty"`
	Not      *ComponentTranslationsWeaponStoryTypeFiltersInput   `json:"not,omitempty"`
	Or       []*ComponentTranslationsWeaponStoryTypeFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsWeaponStoryTypeInput struct {
	Id       string  `json:"id,omitempty"`
	Language string  `json:"language,omitempty"`
	Name     *string `json:"name,omitempty"`
}

type ComponentTranslationsWebArchives struct {
	Description *string                 `json:"description,omitempty"`
	Id          string                  `json:"id"`
	Language    *LanguageEntityResponse `json:"language,omitempty"`
	Notes       *string                 `json:"notes,omitempty"`
}

func (*ComponentTranslationsWebArchives) isGenericMorph() {}

type ComponentTranslationsWebArchivesFiltersInput struct {
	And         []*ComponentTranslationsWebArchivesFiltersInput `json:"and,omitempty"`
	Description *StringFilterInput                              `json:"description,omitempty"`
	Language    *LanguageFiltersInput                           `json:"language,omitempty"`
	Not         *ComponentTranslationsWebArchivesFiltersInput   `json:"not,omitempty"`
	Notes       *StringFilterInput                              `json:"notes,omitempty"`
	Or          []*ComponentTranslationsWebArchivesFiltersInput `json:"or,omitempty"`
}

type ComponentTranslationsWebArchivesInput struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id,omitempty"`
	Language    string  `json:"language,omitempty"`
	Notes       *string `json:"notes,omitempty"`
}

type ComponentTranslationsWiki struct {
	Aliases  []*ComponentCollectionsComponentAliases `json:"aliases,omitempty"`
	Body     *ComponentCollectionsComponentBody      `json:"body,omitempty"`
	Id       string                                  `json:"id"`
	Language *LanguageEntityResponse                 `json:"language,omitempty"`
	Summary  *string                                 `json:"summary,omitempty"`
	Title    string                                  `json:"title"`
}

func (*ComponentTranslationsWiki) isGenericMorph() {}

type ComponentTranslationsWikiFiltersInput struct {
	Aliases  *ComponentCollectionsComponentAliasesFiltersInput `json:"aliases,omitempty"`
	And      []*ComponentTranslationsWikiFiltersInput          `json:"and,omitempty"`
	Body     *ComponentCollectionsComponentBodyFiltersInput    `json:"body,omitempty"`
	Language *LanguageFiltersInput                             `json:"language,omitempty"`
	Not      *ComponentTranslationsWikiFiltersInput            `json:"not,omitempty"`
	Or       []*ComponentTranslationsWikiFiltersInput          `json:"or,omitempty"`
	Summary  *StringFilterInput                                `json:"summary,omitempty"`
	Title    *StringFilterInput                                `json:"title,omitempty"`
}

type ComponentTranslationsWikiInput struct {
	Aliases  []*ComponentCollectionsComponentAliasesInput `json:"aliases,omitempty"`
	Body     *ComponentCollectionsComponentBodyInput      `json:"body,omitempty"`
	Id       string                                       `json:"id,omitempty"`
	Language string                                       `json:"language,omitempty"`
	Summary  *string                                      `json:"summary,omitempty"`
	Title    *string                                      `json:"title,omitempty"`
}

type ComponentTranslationsWikiPost struct {
	Body            *string                                   `json:"body,omitempty"`
	Id              string                                    `json:"id"`
	Language        *LanguageEntityResponse                   `json:"language,omitempty"`
	Source_language *LanguageEntityResponse                   `json:"source_language,omitempty"`
	Status          ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUS `json:"status"`
	Summary         *string                                   `json:"summary,omitempty"`
}

func (*ComponentTranslationsWikiPost) isGenericMorph() {}

type ComponentTranslationsWikiPostFiltersInput struct {
	And             []*ComponentTranslationsWikiPostFiltersInput `json:"and,omitempty"`
	Body            *StringFilterInput                           `json:"body,omitempty"`
	Language        *LanguageFiltersInput                        `json:"language,omitempty"`
	Not             *ComponentTranslationsWikiPostFiltersInput   `json:"not,omitempty"`
	Or              []*ComponentTranslationsWikiPostFiltersInput `json:"or,omitempty"`
	Source_language *LanguageFiltersInput                        `json:"source_language,omitempty"`
	Status          *StringFilterInput                           `json:"status,omitempty"`
	Summary         *StringFilterInput                           `json:"summary,omitempty"`
}

type ComponentWikiSpecializationChronology struct {
	Date           *ComponentBasicsDatepicker             `json:"date"`
	Displayed_date *string                                `json:"displayed_date,omitempty"`
	Id             string                                 `json:"id"`
	Source         *SourceEntityResponse                  `json:"source,omitempty"`
	Translations   []*ComponentTranslationsChronologyItem `json:"translations,omitempty"`
}

func (*ComponentWikiSpecializationChronology) isGenericMorph() {}

type ComponentWikiSpecializationGlossaryItem struct {
	Categories   *CategoryRelationResponseCollection        `json:"categories,omitempty"`
	Id           string                                     `json:"id"`
	Source       *SourceEntityResponse                      `json:"source,omitempty"`
	Translations []*ComponentTranslationsGlossaryDefinition `json:"translations,omitempty"`
}

func (*ComponentWikiSpecializationGlossaryItem) isGenericMorph() {}

type ComponentWikiSpecializationGlossaryItemFiltersInput struct {
	And          []*ComponentWikiSpecializationGlossaryItemFiltersInput `json:"and,omitempty"`
	Categories   *CategoryFiltersInput                                  `json:"categories,omitempty"`
	Not          *ComponentWikiSpecializationGlossaryItemFiltersInput   `json:"not,omitempty"`
	Or           []*ComponentWikiSpecializationGlossaryItemFiltersInput `json:"or,omitempty"`
	Source       *SourceFiltersInput                                    `json:"source,omitempty"`
	Translations *ComponentTranslationsGlossaryDefinitionFiltersInput   `json:"translations,omitempty"`
}

type ComponentWikiSpecializationGlossaryItemInput struct {
	Categories   []string                                        `json:"categories,omitempty"`
	Id           string                                          `json:"id,omitempty"`
	Source       string                                          `json:"source,omitempty"`
	Translations []*ComponentTranslationsGlossaryDefinitionInput `json:"translations,omitempty"`
}

type ComponentWikiSpecializationPost struct {
	Authors      *RecorderRelationResponseCollection `json:"authors,omitempty"`
	Id           string                              `json:"id"`
	Translations []*ComponentTranslationsWikiPost    `json:"translations,omitempty"`
}

func (*ComponentWikiSpecializationPost) isGenericMorph() {}

type ComponentWikiSpecializationWeapon struct {
	Id           string                                   `json:"id"`
	Source       *SourceEntityResponse                    `json:"source,omitempty"`
	Translations []*ComponentTranslationsWeaponStoryStory `json:"translations,omitempty"`
}

func (*ComponentWikiSpecializationWeapon) isGenericMorph() {}

type Content struct {
	Categories        *CategoryRelationResponseCollection      `json:"categories,omitempty"`
	Chronicles        *ChronicleRelationResponseCollection     `json:"chronicles,omitempty"`
	CreatedAt         *DateTime                                `json:"createdAt,omitempty"`
	Folder            *ContentsFolderEntityResponse            `json:"folder,omitempty"`
	Next_contents     *ContentRelationResponseCollection       `json:"next_contents,omitempty"`
	Previous_contents *ContentRelationResponseCollection       `json:"previous_contents,omitempty"`
	Ranged_contents   *RangedContentRelationResponseCollection `json:"ranged_contents,omitempty"`
	Slug              string                                   `json:"slug"`
	Thumbnail         *UploadFileEntityResponse                `json:"thumbnail,omitempty"`
	Translations      []*ComponentTranslationsTitle            `json:"translations,omitempty"`
	Type              *ContentTypeEntityResponse               `json:"type,omitempty"`
	UpdatedAt         *DateTime                                `json:"updatedAt,omitempty"`
}

func (*Content) isGenericMorph() {}

type ContentEntity struct {
	Attributes *Content `json:"attributes,omitempty"`
	Id         string   `json:"id,omitempty"`
}

type ContentEntityResponse struct {
	Data *ContentEntity `json:"data,omitempty"`
}

type ContentEntityResponseCollection struct {
	Data []ContentEntity         `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ContentFiltersInput struct {
	And               []*ContentFiltersInput                  `json:"and,omitempty"`
	Categories        *CategoryFiltersInput                   `json:"categories,omitempty"`
	Chronicles        *ChronicleFiltersInput                  `json:"chronicles,omitempty"`
	CreatedAt         *DateTimeFilterInput                    `json:"createdAt,omitempty"`
	Folder            *ContentsFolderFiltersInput             `json:"folder,omitempty"`
	Id                *IDFilterInput                          `json:"id,omitempty"`
	Next_contents     *ContentFiltersInput                    `json:"next_contents,omitempty"`
	Not               *ContentFiltersInput                    `json:"not,omitempty"`
	Or                []*ContentFiltersInput                  `json:"or,omitempty"`
	Previous_contents *ContentFiltersInput                    `json:"previous_contents,omitempty"`
	Ranged_contents   *RangedContentFiltersInput              `json:"ranged_contents,omitempty"`
	Slug              *StringFilterInput                      `json:"slug,omitempty"`
	Translations      *ComponentTranslationsTitleFiltersInput `json:"translations,omitempty"`
	Type              *ContentTypeFiltersInput                `json:"type,omitempty"`
	UpdatedAt         *DateTimeFilterInput                    `json:"updatedAt,omitempty"`
}

type ContentInput struct {
	Categories        []string                           `json:"categories,omitempty"`
	Chronicles        []string                           `json:"chronicles,omitempty"`
	Folder            string                             `json:"folder,omitempty"`
	Next_contents     []string                           `json:"next_contents,omitempty"`
	Previous_contents []string                           `json:"previous_contents,omitempty"`
	Ranged_contents   []string                           `json:"ranged_contents,omitempty"`
	Slug              *string                            `json:"slug,omitempty"`
	Thumbnail         string                             `json:"thumbnail,omitempty"`
	Translations      []*ComponentTranslationsTitleInput `json:"translations,omitempty"`
	Type              string                             `json:"type,omitempty"`
}

type ContentRelationResponseCollection struct {
	Data []ContentEntity `json:"data"`
}

type ContentType struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*ContentType) isGenericMorph() {}

type ContentTypeEntity struct {
	Attributes *ContentType `json:"attributes,omitempty"`
	Id         string       `json:"id,omitempty"`
}

type ContentTypeEntityResponse struct {
	Data *ContentTypeEntity `json:"data,omitempty"`
}

type ContentTypeEntityResponseCollection struct {
	Data []ContentTypeEntity     `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ContentTypeFiltersInput struct {
	And       []*ContentTypeFiltersInput                    `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *ContentTypeFiltersInput                      `json:"not,omitempty"`
	Or        []*ContentTypeFiltersInput                    `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type ContentTypeInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type ContentsFolder struct {
	Contents      *ContentRelationResponseCollection        `json:"contents,omitempty"`
	CreatedAt     *DateTime                                 `json:"createdAt,omitempty"`
	Parent_folder *ContentsFolderEntityResponse             `json:"parent_folder,omitempty"`
	Slug          string                                    `json:"slug"`
	Subfolders    *ContentsFolderRelationResponseCollection `json:"subfolders,omitempty"`
	Titles        []*ComponentTranslationsSimpleTitle       `json:"titles"`
	UpdatedAt     *DateTime                                 `json:"updatedAt,omitempty"`
}

func (*ContentsFolder) isGenericMorph() {}

type ContentsFolderEntity struct {
	Attributes *ContentsFolder `json:"attributes,omitempty"`
	Id         string          `json:"id,omitempty"`
}

type ContentsFolderEntityResponse struct {
	Data *ContentsFolderEntity `json:"data,omitempty"`
}

type ContentsFolderEntityResponseCollection struct {
	Data []ContentsFolderEntity  `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ContentsFolderFiltersInput struct {
	And           []*ContentsFolderFiltersInput                 `json:"and,omitempty"`
	Contents      *ContentFiltersInput                          `json:"contents,omitempty"`
	CreatedAt     *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id            *IDFilterInput                                `json:"id,omitempty"`
	Not           *ContentsFolderFiltersInput                   `json:"not,omitempty"`
	Or            []*ContentsFolderFiltersInput                 `json:"or,omitempty"`
	Parent_folder *ContentsFolderFiltersInput                   `json:"parent_folder,omitempty"`
	Slug          *StringFilterInput                            `json:"slug,omitempty"`
	Subfolders    *ContentsFolderFiltersInput                   `json:"subfolders,omitempty"`
	Titles        *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt     *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type ContentsFolderInput struct {
	Contents      []string                                 `json:"contents,omitempty"`
	Parent_folder string                                   `json:"parent_folder,omitempty"`
	Slug          *string                                  `json:"slug,omitempty"`
	Subfolders    []string                                 `json:"subfolders,omitempty"`
	Titles        []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type ContentsFolderRelationResponseCollection struct {
	Data []ContentsFolderEntity `json:"data"`
}

type Currency struct {
	Code             string    `json:"code"`
	CreatedAt        *DateTime `json:"createdAt,omitempty"`
	Display_decimals bool      `json:"display_decimals"`
	Rate_to_usd      float64   `json:"rate_to_usd"`
	Symbol           string    `json:"symbol"`
	UpdatedAt        *DateTime `json:"updatedAt,omitempty"`
}

func (*Currency) isGenericMorph() {}

type CurrencyEntity struct {
	Attributes *Currency `json:"attributes,omitempty"`
	Id         string    `json:"id,omitempty"`
}

type CurrencyEntityResponse struct {
	Data *CurrencyEntity `json:"data,omitempty"`
}

type CurrencyEntityResponseCollection struct {
	Data []CurrencyEntity        `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type CurrencyFiltersInput struct {
	And              []*CurrencyFiltersInput `json:"and,omitempty"`
	Code             *StringFilterInput      `json:"code,omitempty"`
	CreatedAt        *DateTimeFilterInput    `json:"createdAt,omitempty"`
	Display_decimals *BooleanFilterInput     `json:"display_decimals,omitempty"`
	Id               *IDFilterInput          `json:"id,omitempty"`
	Not              *CurrencyFiltersInput   `json:"not,omitempty"`
	Or               []*CurrencyFiltersInput `json:"or,omitempty"`
	Rate_to_usd      *FloatFilterInput       `json:"rate_to_usd,omitempty"`
	Symbol           *StringFilterInput      `json:"symbol,omitempty"`
	UpdatedAt        *DateTimeFilterInput    `json:"updatedAt,omitempty"`
}

type CurrencyInput struct {
	Code             *string  `json:"code,omitempty"`
	Display_decimals *bool    `json:"display_decimals,omitempty"`
	Rate_to_usd      *float64 `json:"rate_to_usd,omitempty"`
	Symbol           *string  `json:"symbol,omitempty"`
}

// A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
type DateTime string

type DateTimeFilterInput struct {
	And          []*DateTime          `json:"and,omitempty"`
	Between      []*DateTime          `json:"between,omitempty"`
	Contains     *DateTime            `json:"contains,omitempty"`
	Containsi    *DateTime            `json:"containsi,omitempty"`
	EndsWith     *DateTime            `json:"endsWith,omitempty"`
	Eq           *DateTime            `json:"eq,omitempty"`
	Eqi          *DateTime            `json:"eqi,omitempty"`
	Gt           *DateTime            `json:"gt,omitempty"`
	Gte          *DateTime            `json:"gte,omitempty"`
	In           []*DateTime          `json:"in,omitempty"`
	Lt           *DateTime            `json:"lt,omitempty"`
	Lte          *DateTime            `json:"lte,omitempty"`
	Ne           *DateTime            `json:"ne,omitempty"`
	Not          *DateTimeFilterInput `json:"not,omitempty"`
	NotContains  *DateTime            `json:"notContains,omitempty"`
	NotContainsi *DateTime            `json:"notContainsi,omitempty"`
	NotIn        []*DateTime          `json:"notIn,omitempty"`
	NotNull      *bool                `json:"notNull,omitempty"`
	Null         *bool                `json:"null,omitempty"`
	Or           []*DateTime          `json:"or,omitempty"`
	StartsWith   *DateTime            `json:"startsWith,omitempty"`
}

type ENUM_CATEGORY_SERIES string

const (
	ENUM_CATEGORY_SERIESDrakengard ENUM_CATEGORY_SERIES = "Drakengard"
	ENUM_CATEGORY_SERIESNier       ENUM_CATEGORY_SERIES = "NieR"
	ENUM_CATEGORY_SERIESYorha      ENUM_CATEGORY_SERIES = "YoRHa"
)

type ENUM_COMPONENTBASICSFILESIZE_UNIT string

const (
	ENUM_COMPONENTBASICSFILESIZE_UNITGb ENUM_COMPONENTBASICSFILESIZE_UNIT = "gb"
	ENUM_COMPONENTBASICSFILESIZE_UNITKb ENUM_COMPONENTBASICSFILESIZE_UNIT = "kb"
	ENUM_COMPONENTBASICSFILESIZE_UNITMb ENUM_COMPONENTBASICSFILESIZE_UNIT = "mb"
)

type ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS string

const (
	ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUSDone       ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS = "Done"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUSDraft      ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS = "Draft"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUSIncomplete ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS = "Incomplete"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUSReview     ENUM_COMPONENTCOLLECTIONSCOMPONENTBODY_STATUS = "Review"
)

type ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUS string

const (
	ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUSDone       ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUS = "Done"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUSDraft      ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUS = "Draft"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUSIncomplete ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUS = "Incomplete"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUSReview     ENUM_COMPONENTCOLLECTIONSCOMPONENTDEFINITION_STATUS = "Review"
)

type ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS string

const (
	ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUSDone       ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS = "Done"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUSDraft      ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS = "Draft"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUSIncomplete ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS = "Incomplete"
	ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUSReview     ENUM_COMPONENTCOLLECTIONSCOMPONENTLIBRARYIMAGES_STATUS = "Review"
)

type ENUM_COMPONENTMETADATABOOKS_BINDING_TYPE string

const (
	ENUM_COMPONENTMETADATABOOKS_BINDING_TYPEHardcover ENUM_COMPONENTMETADATABOOKS_BINDING_TYPE = "Hardcover"
	ENUM_COMPONENTMETADATABOOKS_BINDING_TYPEPaperback ENUM_COMPONENTMETADATABOOKS_BINDING_TYPE = "Paperback"
)

type ENUM_COMPONENTMETADATABOOKS_PAGE_ORDER string

const (
	ENUM_COMPONENTMETADATABOOKS_PAGE_ORDERLeftToRight ENUM_COMPONENTMETADATABOOKS_PAGE_ORDER = "Left_to_Right"
	ENUM_COMPONENTMETADATABOOKS_PAGE_ORDERRightToLeft ENUM_COMPONENTMETADATABOOKS_PAGE_ORDER = "Right_to_Left"
)

type ENUM_COMPONENTSETSAUDIOSET_STATUS string

const (
	ENUM_COMPONENTSETSAUDIOSET_STATUSDone       ENUM_COMPONENTSETSAUDIOSET_STATUS = "Done"
	ENUM_COMPONENTSETSAUDIOSET_STATUSDraft      ENUM_COMPONENTSETSAUDIOSET_STATUS = "Draft"
	ENUM_COMPONENTSETSAUDIOSET_STATUSIncomplete ENUM_COMPONENTSETSAUDIOSET_STATUS = "Incomplete"
	ENUM_COMPONENTSETSAUDIOSET_STATUSReview     ENUM_COMPONENTSETSAUDIOSET_STATUS = "Review"
)

type ENUM_COMPONENTSETSSCANSET_STATUS string

const (
	ENUM_COMPONENTSETSSCANSET_STATUSDone       ENUM_COMPONENTSETSSCANSET_STATUS = "Done"
	ENUM_COMPONENTSETSSCANSET_STATUSDraft      ENUM_COMPONENTSETSSCANSET_STATUS = "Draft"
	ENUM_COMPONENTSETSSCANSET_STATUSIncomplete ENUM_COMPONENTSETSSCANSET_STATUS = "Incomplete"
	ENUM_COMPONENTSETSSCANSET_STATUSReview     ENUM_COMPONENTSETSSCANSET_STATUS = "Review"
)

type ENUM_COMPONENTSETSTEXTSET_STATUS string

const (
	ENUM_COMPONENTSETSTEXTSET_STATUSDone       ENUM_COMPONENTSETSTEXTSET_STATUS = "Done"
	ENUM_COMPONENTSETSTEXTSET_STATUSDraft      ENUM_COMPONENTSETSTEXTSET_STATUS = "Draft"
	ENUM_COMPONENTSETSTEXTSET_STATUSIncomplete ENUM_COMPONENTSETSTEXTSET_STATUS = "Incomplete"
	ENUM_COMPONENTSETSTEXTSET_STATUSReview     ENUM_COMPONENTSETSTEXTSET_STATUS = "Review"
)

type ENUM_COMPONENTSETSVIDEOSET_STATUS string

const (
	ENUM_COMPONENTSETSVIDEOSET_STATUSDone       ENUM_COMPONENTSETSVIDEOSET_STATUS = "Done"
	ENUM_COMPONENTSETSVIDEOSET_STATUSDraft      ENUM_COMPONENTSETSVIDEOSET_STATUS = "Draft"
	ENUM_COMPONENTSETSVIDEOSET_STATUSIncomplete ENUM_COMPONENTSETSVIDEOSET_STATUS = "Incomplete"
	ENUM_COMPONENTSETSVIDEOSET_STATUSReview     ENUM_COMPONENTSETSVIDEOSET_STATUS = "Review"
)

type ENUM_COMPONENTSETSWIKISET_STATUS string

const (
	ENUM_COMPONENTSETSWIKISET_STATUSDone       ENUM_COMPONENTSETSWIKISET_STATUS = "Done"
	ENUM_COMPONENTSETSWIKISET_STATUSDraft      ENUM_COMPONENTSETSWIKISET_STATUS = "Draft"
	ENUM_COMPONENTSETSWIKISET_STATUSIncomplete ENUM_COMPONENTSETSWIKISET_STATUS = "Incomplete"
	ENUM_COMPONENTSETSWIKISET_STATUSReview     ENUM_COMPONENTSETSWIKISET_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUSDone       ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUSDraft      ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUSReview     ENUM_COMPONENTTRANSLATIONSAUDIOSETS_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUSDone       ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUSDraft      ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUSReview     ENUM_COMPONENTTRANSLATIONSCHRONOLOGYITEM_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUSDone       ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUSDraft      ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUSReview     ENUM_COMPONENTTRANSLATIONSGLOSSARYDEFINITION_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSPOSTS_STATUSDone       ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSPOSTS_STATUSDraft      ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSPOSTS_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSPOSTS_STATUSReview     ENUM_COMPONENTTRANSLATIONSPOSTS_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSSCANSET_STATUSDone       ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSSCANSET_STATUSDraft      ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSSCANSET_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSSCANSET_STATUSReview     ENUM_COMPONENTTRANSLATIONSSCANSET_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUSDone       ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUSDraft      ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUSReview     ENUM_COMPONENTTRANSLATIONSTEXTSET_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUSDone       ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUSDraft      ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUSReview     ENUM_COMPONENTTRANSLATIONSVIDEOSETS_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUSDone       ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUSDraft      ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUSReview     ENUM_COMPONENTTRANSLATIONSWEAPONSTORYSTORY_STATUS = "Review"
)

type ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUS string

const (
	ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUSDone       ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUS = "Done"
	ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUSDraft      ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUS = "Draft"
	ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUSIncomplete ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUS = "Incomplete"
	ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUSReview     ENUM_COMPONENTTRANSLATIONSWIKIPOST_STATUS = "Review"
)

type ENUM_VIDEO_SOURCE string

const (
	ENUM_VIDEO_SOURCENiconico ENUM_VIDEO_SOURCE = "NicoNico"
	ENUM_VIDEO_SOURCETumblr   ENUM_VIDEO_SOURCE = "Tumblr"
	ENUM_VIDEO_SOURCEYoutube  ENUM_VIDEO_SOURCE = "YouTube"
)

type ENUM_WEBARCHIVE_FORMAT string

const (
	ENUM_WEBARCHIVE_FORMATWacz ENUM_WEBARCHIVE_FORMAT = "wacz"
	ENUM_WEBARCHIVE_FORMATZip  ENUM_WEBARCHIVE_FORMAT = "zip"
)

type ENUM_WEBARCHIVE_TYPE string

const (
	ENUM_WEBARCHIVE_TYPEOnlineDoc ENUM_WEBARCHIVE_TYPE = "online_doc"
	ENUM_WEBARCHIVE_TYPEWebpage   ENUM_WEBARCHIVE_TYPE = "webpage"
	ENUM_WEBARCHIVE_TYPEWebsite   ENUM_WEBARCHIVE_TYPE = "website"
)

type Error struct {
	Code    string  `json:"code"`
	Message *string `json:"message,omitempty"`
}

func (*Error) isLibraryItemMetadataDynamicZone() {}

func (*Error) isRangedContentRangeDynamicZone() {}

type FileInfoInput struct {
	AlternativeText *string `json:"alternativeText,omitempty"`
	Caption         *string `json:"caption,omitempty"`
	Name            *string `json:"name,omitempty"`
}

type FloatFilterInput struct {
	And          []*float64        `json:"and,omitempty"`
	Between      []*float64        `json:"between,omitempty"`
	Contains     *float64          `json:"contains,omitempty"`
	Containsi    *float64          `json:"containsi,omitempty"`
	EndsWith     *float64          `json:"endsWith,omitempty"`
	Eq           *float64          `json:"eq,omitempty"`
	Eqi          *float64          `json:"eqi,omitempty"`
	Gt           *float64          `json:"gt,omitempty"`
	Gte          *float64          `json:"gte,omitempty"`
	In           []*float64        `json:"in,omitempty"`
	Lt           *float64          `json:"lt,omitempty"`
	Lte          *float64          `json:"lte,omitempty"`
	Ne           *float64          `json:"ne,omitempty"`
	Not          *FloatFilterInput `json:"not,omitempty"`
	NotContains  *float64          `json:"notContains,omitempty"`
	NotContainsi *float64          `json:"notContainsi,omitempty"`
	NotIn        []*float64        `json:"notIn,omitempty"`
	NotNull      *bool             `json:"notNull,omitempty"`
	Null         *bool             `json:"null,omitempty"`
	Or           []*float64        `json:"or,omitempty"`
	StartsWith   *float64          `json:"startsWith,omitempty"`
}

type GamePlatform struct {
	CreatedAt *DateTime                                         `json:"createdAt,omitempty"`
	Slug      string                                            `json:"slug"`
	Titles    []*ComponentTranslationsGamePlatformsTranslations `json:"titles,omitempty"`
	UpdatedAt *DateTime                                         `json:"updatedAt,omitempty"`
}

func (*GamePlatform) isGenericMorph() {}

type GamePlatformEntity struct {
	Attributes *GamePlatform `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type GamePlatformEntityResponse struct {
	Data *GamePlatformEntity `json:"data,omitempty"`
}

type GamePlatformEntityResponseCollection struct {
	Data []GamePlatformEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type GamePlatformFiltersInput struct {
	And       []*GamePlatformFiltersInput                                 `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                                        `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                              `json:"id,omitempty"`
	Not       *GamePlatformFiltersInput                                   `json:"not,omitempty"`
	Or        []*GamePlatformFiltersInput                                 `json:"or,omitempty"`
	Slug      *StringFilterInput                                          `json:"slug,omitempty"`
	Titles    *ComponentTranslationsGamePlatformsTranslationsFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                                        `json:"updatedAt,omitempty"`
}

type GamePlatformInput struct {
	Slug   *string                                                `json:"slug,omitempty"`
	Titles []*ComponentTranslationsGamePlatformsTranslationsInput `json:"titles,omitempty"`
}

type GamePlatformRelationResponseCollection struct {
	Data []GamePlatformEntity `json:"data"`
}

type GenericMorph struct {
	// Underlying value of the GraphQL union
	Value GenericMorphValue `json:"-"`
}

func (base *GenericMorph) UnmarshalJSON(b []byte) error {
	type Raw GenericMorph
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "AudioSubtype":
		base.Value = new(AudioSubtype)
	case "Category":
		base.Value = new(Category)
	case "Chronicle":
		base.Value = new(Chronicle)
	case "ChroniclesChapter":
		base.Value = new(ChroniclesChapter)
	case "ChronologyEra":
		base.Value = new(ChronologyEra)
	case "ChronologyItem":
		base.Value = new(ChronologyItem)
	case "ComponentBasicsCredits":
		base.Value = new(ComponentBasicsCredits)
	case "ComponentBasicsDatepicker":
		base.Value = new(ComponentBasicsDatepicker)
	case "ComponentBasicsFileSize":
		base.Value = new(ComponentBasicsFileSize)
	case "ComponentBasicsPrice":
		base.Value = new(ComponentBasicsPrice)
	case "ComponentBasicsSize":
		base.Value = new(ComponentBasicsSize)
	case "ComponentBasicsUrl":
		base.Value = new(ComponentBasicsUrl)
	case "ComponentCollectionsComponentAliases":
		base.Value = new(ComponentCollectionsComponentAliases)
	case "ComponentCollectionsComponentBody":
		base.Value = new(ComponentCollectionsComponentBody)
	case "ComponentCollectionsComponentDefinition":
		base.Value = new(ComponentCollectionsComponentDefinition)
	case "ComponentCollectionsComponentEvent":
		base.Value = new(ComponentCollectionsComponentEvent)
	case "ComponentCollectionsComponentGlossaryDefinition":
		base.Value = new(ComponentCollectionsComponentGlossaryDefinition)
	case "ComponentCollectionsComponentLibraryCover":
		base.Value = new(ComponentCollectionsComponentLibraryCover)
	case "ComponentCollectionsComponentLibraryDustJacket":
		base.Value = new(ComponentCollectionsComponentLibraryDustJacket)
	case "ComponentCollectionsComponentLibraryImages":
		base.Value = new(ComponentCollectionsComponentLibraryImages)
	case "ComponentCollectionsComponentLibraryObiBelt":
		base.Value = new(ComponentCollectionsComponentLibraryObiBelt)
	case "ComponentCollectionsComponentTitles":
		base.Value = new(ComponentCollectionsComponentTitles)
	case "ComponentCollectionsComponentWeaponStory":
		base.Value = new(ComponentCollectionsComponentWeaponStory)
	case "ComponentCollectionsComponentWikiDefinition":
		base.Value = new(ComponentCollectionsComponentWikiDefinition)
	case "ComponentMetadataAudio":
		base.Value = new(ComponentMetadataAudio)
	case "ComponentMetadataBooks":
		base.Value = new(ComponentMetadataBooks)
	case "ComponentMetadataGame":
		base.Value = new(ComponentMetadataGame)
	case "ComponentMetadataGroup":
		base.Value = new(ComponentMetadataGroup)
	case "ComponentMetadataMerch":
		base.Value = new(ComponentMetadataMerch)
	case "ComponentMetadataOther":
		base.Value = new(ComponentMetadataOther)
	case "ComponentMetadataVideo":
		base.Value = new(ComponentMetadataVideo)
	case "ComponentPageBuilderGallery":
		base.Value = new(ComponentPageBuilderGallery)
	case "ComponentPageBuilderGrid":
		base.Value = new(ComponentPageBuilderGrid)
	case "ComponentPageBuilderTabs":
		base.Value = new(ComponentPageBuilderTabs)
	case "ComponentRangeGameAspect":
		base.Value = new(ComponentRangeGameAspect)
	case "ComponentRangeOther":
		base.Value = new(ComponentRangeOther)
	case "ComponentRangePageRange":
		base.Value = new(ComponentRangePageRange)
	case "ComponentRangeTimeRange":
		base.Value = new(ComponentRangeTimeRange)
	case "ComponentSetsAudioSet":
		base.Value = new(ComponentSetsAudioSet)
	case "ComponentSetsScanSet":
		base.Value = new(ComponentSetsScanSet)
	case "ComponentSetsTextSet":
		base.Value = new(ComponentSetsTextSet)
	case "ComponentSetsTrackSet":
		base.Value = new(ComponentSetsTrackSet)
	case "ComponentSetsVideoSet":
		base.Value = new(ComponentSetsVideoSet)
	case "ComponentSetsWikiSet":
		base.Value = new(ComponentSetsWikiSet)
	case "ComponentSourceUrlSource":
		base.Value = new(ComponentSourceUrlSource)
	case "ComponentTranslationsAudioSets":
		base.Value = new(ComponentTranslationsAudioSets)
	case "ComponentTranslationsBio":
		base.Value = new(ComponentTranslationsBio)
	case "ComponentTranslationsCategoriesTitle":
		base.Value = new(ComponentTranslationsCategoriesTitle)
	case "ComponentTranslationsChronicles":
		base.Value = new(ComponentTranslationsChronicles)
	case "ComponentTranslationsChronologyEra":
		base.Value = new(ComponentTranslationsChronologyEra)
	case "ComponentTranslationsChronologyItem":
		base.Value = new(ComponentTranslationsChronologyItem)
	case "ComponentTranslationsGamePlatformsTranslations":
		base.Value = new(ComponentTranslationsGamePlatformsTranslations)
	case "ComponentTranslationsGlossaryDefinition":
		base.Value = new(ComponentTranslationsGlossaryDefinition)
	case "ComponentTranslationsGlossaryItem":
		base.Value = new(ComponentTranslationsGlossaryItem)
	case "ComponentTranslationsLibraryContent":
		base.Value = new(ComponentTranslationsLibraryContent)
	case "ComponentTranslationsLibraryItems":
		base.Value = new(ComponentTranslationsLibraryItems)
	case "ComponentTranslationsPosts":
		base.Value = new(ComponentTranslationsPosts)
	case "ComponentTranslationsReinCostumes":
		base.Value = new(ComponentTranslationsReinCostumes)
	case "ComponentTranslationsReinEmblems":
		base.Value = new(ComponentTranslationsReinEmblems)
	case "ComponentTranslationsScanSet":
		base.Value = new(ComponentTranslationsScanSet)
	case "ComponentTranslationsSimpleTitle":
		base.Value = new(ComponentTranslationsSimpleTitle)
	case "ComponentTranslationsTextSet":
		base.Value = new(ComponentTranslationsTextSet)
	case "ComponentTranslationsTitle":
		base.Value = new(ComponentTranslationsTitle)
	case "ComponentTranslationsVideoSets":
		base.Value = new(ComponentTranslationsVideoSets)
	case "ComponentTranslationsWeaponStory":
		base.Value = new(ComponentTranslationsWeaponStory)
	case "ComponentTranslationsWeaponStoryStory":
		base.Value = new(ComponentTranslationsWeaponStoryStory)
	case "ComponentTranslationsWeaponStoryType":
		base.Value = new(ComponentTranslationsWeaponStoryType)
	case "ComponentTranslationsWebArchives":
		base.Value = new(ComponentTranslationsWebArchives)
	case "ComponentTranslationsWiki":
		base.Value = new(ComponentTranslationsWiki)
	case "ComponentTranslationsWikiPost":
		base.Value = new(ComponentTranslationsWikiPost)
	case "ComponentWikiSpecializationChronology":
		base.Value = new(ComponentWikiSpecializationChronology)
	case "ComponentWikiSpecializationGlossaryItem":
		base.Value = new(ComponentWikiSpecializationGlossaryItem)
	case "ComponentWikiSpecializationPost":
		base.Value = new(ComponentWikiSpecializationPost)
	case "ComponentWikiSpecializationWeapon":
		base.Value = new(ComponentWikiSpecializationWeapon)
	case "Content":
		base.Value = new(Content)
	case "ContentType":
		base.Value = new(ContentType)
	case "ContentsFolder":
		base.Value = new(ContentsFolder)
	case "Currency":
		base.Value = new(Currency)
	case "GamePlatform":
		base.Value = new(GamePlatform)
	case "GlossaryItem":
		base.Value = new(GlossaryItem)
	case "GlossaryItemType":
		base.Value = new(GlossaryItemType)
	case "GroupSubtype":
		base.Value = new(GroupSubtype)
	case "Language":
		base.Value = new(Language)
	case "LibraryItem":
		base.Value = new(LibraryItem)
	case "MerchItem":
		base.Value = new(MerchItem)
	case "MetadataType":
		base.Value = new(MetadataType)
	case "Post":
		base.Value = new(Post)
	case "RangedContent":
		base.Value = new(RangedContent)
	case "Recorder":
		base.Value = new(Recorder)
	case "ReinCostume":
		base.Value = new(ReinCostume)
	case "ReinEmblem":
		base.Value = new(ReinEmblem)
	case "Source":
		base.Value = new(Source)
	case "TextualSubtype":
		base.Value = new(TextualSubtype)
	case "UploadFile":
		base.Value = new(UploadFile)
	case "UploadFolder":
		base.Value = new(UploadFolder)
	case "Video":
		base.Value = new(Video)
	case "VideoChannel":
		base.Value = new(VideoChannel)
	case "VideoSubtype":
		base.Value = new(VideoSubtype)
	case "WeaponStory":
		base.Value = new(WeaponStory)
	case "WeaponStoryGroup":
		base.Value = new(WeaponStoryGroup)
	case "WeaponStoryType":
		base.Value = new(WeaponStoryType)
	case "WebArchive":
		base.Value = new(WebArchive)
	case "WebsiteInterface":
		base.Value = new(WebsiteInterface)
	case "WikiPage":
		base.Value = new(WikiPage)
	case "WikiPagesTag":
		base.Value = new(WikiPagesTag)
	case "":
		return fmt.Errorf("gqlclient: union GenericMorph: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union GenericMorph: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// GenericMorphValue is one of: AudioSubtype | Category | Chronicle | ChroniclesChapter | ChronologyEra | ChronologyItem | ComponentBasicsCredits | ComponentBasicsDatepicker | ComponentBasicsFileSize | ComponentBasicsPrice | ComponentBasicsSize | ComponentBasicsUrl | ComponentCollectionsComponentAliases | ComponentCollectionsComponentBody | ComponentCollectionsComponentDefinition | ComponentCollectionsComponentEvent | ComponentCollectionsComponentGlossaryDefinition | ComponentCollectionsComponentLibraryCover | ComponentCollectionsComponentLibraryDustJacket | ComponentCollectionsComponentLibraryImages | ComponentCollectionsComponentLibraryObiBelt | ComponentCollectionsComponentTitles | ComponentCollectionsComponentWeaponStory | ComponentCollectionsComponentWikiDefinition | ComponentMetadataAudio | ComponentMetadataBooks | ComponentMetadataGame | ComponentMetadataGroup | ComponentMetadataMerch | ComponentMetadataOther | ComponentMetadataVideo | ComponentPageBuilderGallery | ComponentPageBuilderGrid | ComponentPageBuilderTabs | ComponentRangeGameAspect | ComponentRangeOther | ComponentRangePageRange | ComponentRangeTimeRange | ComponentSetsAudioSet | ComponentSetsScanSet | ComponentSetsTextSet | ComponentSetsTrackSet | ComponentSetsVideoSet | ComponentSetsWikiSet | ComponentSourceUrlSource | ComponentTranslationsAudioSets | ComponentTranslationsBio | ComponentTranslationsCategoriesTitle | ComponentTranslationsChronicles | ComponentTranslationsChronologyEra | ComponentTranslationsChronologyItem | ComponentTranslationsGamePlatformsTranslations | ComponentTranslationsGlossaryDefinition | ComponentTranslationsGlossaryItem | ComponentTranslationsLibraryContent | ComponentTranslationsLibraryItems | ComponentTranslationsPosts | ComponentTranslationsReinCostumes | ComponentTranslationsReinEmblems | ComponentTranslationsScanSet | ComponentTranslationsSimpleTitle | ComponentTranslationsTextSet | ComponentTranslationsTitle | ComponentTranslationsVideoSets | ComponentTranslationsWeaponStory | ComponentTranslationsWeaponStoryStory | ComponentTranslationsWeaponStoryType | ComponentTranslationsWebArchives | ComponentTranslationsWiki | ComponentTranslationsWikiPost | ComponentWikiSpecializationChronology | ComponentWikiSpecializationGlossaryItem | ComponentWikiSpecializationPost | ComponentWikiSpecializationWeapon | Content | ContentType | ContentsFolder | Currency | GamePlatform | GlossaryItem | GlossaryItemType | GroupSubtype | Language | LibraryItem | MerchItem | MetadataType | Post | RangedContent | Recorder | ReinCostume | ReinEmblem | Source | TextualSubtype | UploadFile | UploadFolder | Video | VideoChannel | VideoSubtype | WeaponStory | WeaponStoryGroup | WeaponStoryType | WebArchive | WebsiteInterface | WikiPage | WikiPagesTag
type GenericMorphValue interface {
	isGenericMorph()
}

type GlossaryItem struct {
	CreatedAt   *DateTime                                          `json:"createdAt,omitempty"`
	Definitions []*ComponentCollectionsComponentGlossaryDefinition `json:"definitions,omitempty"`
	Slug        string                                             `json:"slug"`
	Title       []*ComponentTranslationsGlossaryItem               `json:"title,omitempty"`
	Type        *GlossaryItemTypeEntityResponse                    `json:"type,omitempty"`
	UpdatedAt   *DateTime                                          `json:"updatedAt,omitempty"`
}

func (*GlossaryItem) isGenericMorph() {}

type GlossaryItemEntity struct {
	Attributes *GlossaryItem `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type GlossaryItemEntityResponse struct {
	Data *GlossaryItemEntity `json:"data,omitempty"`
}

type GlossaryItemEntityResponseCollection struct {
	Data []GlossaryItemEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type GlossaryItemFiltersInput struct {
	And         []*GlossaryItemFiltersInput                                  `json:"and,omitempty"`
	CreatedAt   *DateTimeFilterInput                                         `json:"createdAt,omitempty"`
	Definitions *ComponentCollectionsComponentGlossaryDefinitionFiltersInput `json:"definitions,omitempty"`
	Id          *IDFilterInput                                               `json:"id,omitempty"`
	Not         *GlossaryItemFiltersInput                                    `json:"not,omitempty"`
	Or          []*GlossaryItemFiltersInput                                  `json:"or,omitempty"`
	Slug        *StringFilterInput                                           `json:"slug,omitempty"`
	Title       *ComponentTranslationsGlossaryItemFiltersInput               `json:"title,omitempty"`
	Type        *GlossaryItemTypeFiltersInput                                `json:"type,omitempty"`
	UpdatedAt   *DateTimeFilterInput                                         `json:"updatedAt,omitempty"`
}

type GlossaryItemInput struct {
	Definitions []*ComponentCollectionsComponentGlossaryDefinitionInput `json:"definitions,omitempty"`
	Slug        *string                                                 `json:"slug,omitempty"`
	Title       []*ComponentTranslationsGlossaryItemInput               `json:"title,omitempty"`
	Type        string                                                  `json:"type,omitempty"`
}

type GlossaryItemType struct {
	CreatedAt *DateTime `json:"createdAt,omitempty"`
	Type      string    `json:"type"`
	UpdatedAt *DateTime `json:"updatedAt,omitempty"`
}

func (*GlossaryItemType) isGenericMorph() {}

type GlossaryItemTypeEntity struct {
	Attributes *GlossaryItemType `json:"attributes,omitempty"`
	Id         string            `json:"id,omitempty"`
}

type GlossaryItemTypeEntityResponse struct {
	Data *GlossaryItemTypeEntity `json:"data,omitempty"`
}

type GlossaryItemTypeEntityResponseCollection struct {
	Data []GlossaryItemTypeEntity `json:"data"`
	Meta *ResponseCollectionMeta  `json:"meta"`
}

type GlossaryItemTypeFiltersInput struct {
	And       []*GlossaryItemTypeFiltersInput `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput            `json:"createdAt,omitempty"`
	Id        *IDFilterInput                  `json:"id,omitempty"`
	Not       *GlossaryItemTypeFiltersInput   `json:"not,omitempty"`
	Or        []*GlossaryItemTypeFiltersInput `json:"or,omitempty"`
	Type      *StringFilterInput              `json:"type,omitempty"`
	UpdatedAt *DateTimeFilterInput            `json:"updatedAt,omitempty"`
}

type GlossaryItemTypeInput struct {
	Type *string `json:"type,omitempty"`
}

type GroupSubtype struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*GroupSubtype) isGenericMorph() {}

type GroupSubtypeEntity struct {
	Attributes *GroupSubtype `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type GroupSubtypeEntityResponse struct {
	Data *GroupSubtypeEntity `json:"data,omitempty"`
}

type GroupSubtypeEntityResponseCollection struct {
	Data []GroupSubtypeEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type GroupSubtypeFiltersInput struct {
	And       []*GroupSubtypeFiltersInput                   `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *GroupSubtypeFiltersInput                     `json:"not,omitempty"`
	Or        []*GroupSubtypeFiltersInput                   `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type GroupSubtypeInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type IDFilterInput struct {
	And          []string       `json:"and,omitempty"`
	Between      []string       `json:"between,omitempty"`
	Contains     string         `json:"contains,omitempty"`
	Containsi    string         `json:"containsi,omitempty"`
	EndsWith     string         `json:"endsWith,omitempty"`
	Eq           string         `json:"eq,omitempty"`
	Eqi          string         `json:"eqi,omitempty"`
	Gt           string         `json:"gt,omitempty"`
	Gte          string         `json:"gte,omitempty"`
	In           []string       `json:"in,omitempty"`
	Lt           string         `json:"lt,omitempty"`
	Lte          string         `json:"lte,omitempty"`
	Ne           string         `json:"ne,omitempty"`
	Not          *IDFilterInput `json:"not,omitempty"`
	NotContains  string         `json:"notContains,omitempty"`
	NotContainsi string         `json:"notContainsi,omitempty"`
	NotIn        []string       `json:"notIn,omitempty"`
	NotNull      *bool          `json:"notNull,omitempty"`
	Null         *bool          `json:"null,omitempty"`
	Or           []string       `json:"or,omitempty"`
	StartsWith   string         `json:"startsWith,omitempty"`
}

type IntFilterInput struct {
	And          []*int32        `json:"and,omitempty"`
	Between      []*int32        `json:"between,omitempty"`
	Contains     *int32          `json:"contains,omitempty"`
	Containsi    *int32          `json:"containsi,omitempty"`
	EndsWith     *int32          `json:"endsWith,omitempty"`
	Eq           *int32          `json:"eq,omitempty"`
	Eqi          *int32          `json:"eqi,omitempty"`
	Gt           *int32          `json:"gt,omitempty"`
	Gte          *int32          `json:"gte,omitempty"`
	In           []*int32        `json:"in,omitempty"`
	Lt           *int32          `json:"lt,omitempty"`
	Lte          *int32          `json:"lte,omitempty"`
	Ne           *int32          `json:"ne,omitempty"`
	Not          *IntFilterInput `json:"not,omitempty"`
	NotContains  *int32          `json:"notContains,omitempty"`
	NotContainsi *int32          `json:"notContainsi,omitempty"`
	NotIn        []*int32        `json:"notIn,omitempty"`
	NotNull      *bool           `json:"notNull,omitempty"`
	Null         *bool           `json:"null,omitempty"`
	Or           []*int32        `json:"or,omitempty"`
	StartsWith   *int32          `json:"startsWith,omitempty"`
}

// The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
type JSON string

type JSONFilterInput struct {
	And          []*JSON          `json:"and,omitempty"`
	Between      []*JSON          `json:"between,omitempty"`
	Contains     *JSON            `json:"contains,omitempty"`
	Containsi    *JSON            `json:"containsi,omitempty"`
	EndsWith     *JSON            `json:"endsWith,omitempty"`
	Eq           *JSON            `json:"eq,omitempty"`
	Eqi          *JSON            `json:"eqi,omitempty"`
	Gt           *JSON            `json:"gt,omitempty"`
	Gte          *JSON            `json:"gte,omitempty"`
	In           []*JSON          `json:"in,omitempty"`
	Lt           *JSON            `json:"lt,omitempty"`
	Lte          *JSON            `json:"lte,omitempty"`
	Ne           *JSON            `json:"ne,omitempty"`
	Not          *JSONFilterInput `json:"not,omitempty"`
	NotContains  *JSON            `json:"notContains,omitempty"`
	NotContainsi *JSON            `json:"notContainsi,omitempty"`
	NotIn        []*JSON          `json:"notIn,omitempty"`
	NotNull      *bool            `json:"notNull,omitempty"`
	Null         *bool            `json:"null,omitempty"`
	Or           []*JSON          `json:"or,omitempty"`
	StartsWith   *JSON            `json:"startsWith,omitempty"`
}

type Language struct {
	Code           string    `json:"code"`
	CreatedAt      *DateTime `json:"createdAt,omitempty"`
	Localized_name string    `json:"localized_name"`
	Name           string    `json:"name"`
	UpdatedAt      *DateTime `json:"updatedAt,omitempty"`
}

func (*Language) isGenericMorph() {}

type LanguageEntity struct {
	Attributes *Language `json:"attributes,omitempty"`
	Id         string    `json:"id,omitempty"`
}

type LanguageEntityResponse struct {
	Data *LanguageEntity `json:"data,omitempty"`
}

type LanguageEntityResponseCollection struct {
	Data []LanguageEntity        `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type LanguageFiltersInput struct {
	And            []*LanguageFiltersInput `json:"and,omitempty"`
	Code           *StringFilterInput      `json:"code,omitempty"`
	CreatedAt      *DateTimeFilterInput    `json:"createdAt,omitempty"`
	Id             *IDFilterInput          `json:"id,omitempty"`
	Localized_name *StringFilterInput      `json:"localized_name,omitempty"`
	Name           *StringFilterInput      `json:"name,omitempty"`
	Not            *LanguageFiltersInput   `json:"not,omitempty"`
	Or             []*LanguageFiltersInput `json:"or,omitempty"`
	UpdatedAt      *DateTimeFilterInput    `json:"updatedAt,omitempty"`
}

type LanguageInput struct {
	Code           *string `json:"code,omitempty"`
	Localized_name *string `json:"localized_name,omitempty"`
	Name           *string `json:"name,omitempty"`
}

type LanguageRelationResponseCollection struct {
	Data []LanguageEntity `json:"data"`
}

type LibraryItem struct {
	Categories         *CategoryRelationResponseCollection           `json:"categories,omitempty"`
	Contents           *RangedContentRelationResponseCollection      `json:"contents,omitempty"`
	CreatedAt          *DateTime                                     `json:"createdAt,omitempty"`
	Descriptions       []*ComponentTranslationsLibraryItems          `json:"descriptions,omitempty"`
	Digital            bool                                          `json:"digital"`
	Download_available bool                                          `json:"download_available"`
	Gallery            *UploadFileRelationResponseCollection         `json:"gallery,omitempty"`
	Images             []*ComponentCollectionsComponentLibraryImages `json:"images,omitempty"`
	Metadata           []*LibraryItemMetadataDynamicZone             `json:"metadata,omitempty"`
	Price              *ComponentBasicsPrice                         `json:"price,omitempty"`
	Primary            bool                                          `json:"primary"`
	Release_date       *ComponentBasicsDatepicker                    `json:"release_date,omitempty"`
	Root_item          bool                                          `json:"root_item"`
	Size               *ComponentBasicsSize                          `json:"size,omitempty"`
	Slug               string                                        `json:"slug"`
	Subitem_of         *LibraryItemRelationResponseCollection        `json:"subitem_of,omitempty"`
	Subitems           *LibraryItemRelationResponseCollection        `json:"subitems,omitempty"`
	Submerchs          *MerchItemRelationResponseCollection          `json:"submerchs,omitempty"`
	Subtitle           *string                                       `json:"subtitle,omitempty"`
	Thumbnail          *UploadFileEntityResponse                     `json:"thumbnail,omitempty"`
	Title              string                                        `json:"title"`
	UpdatedAt          *DateTime                                     `json:"updatedAt,omitempty"`
	Urls               []*ComponentBasicsUrl                         `json:"urls,omitempty"`
}

func (*LibraryItem) isGenericMorph() {}

type LibraryItemEntity struct {
	Attributes *LibraryItem `json:"attributes,omitempty"`
	Id         string       `json:"id,omitempty"`
}

type LibraryItemEntityResponse struct {
	Data *LibraryItemEntity `json:"data,omitempty"`
}

type LibraryItemEntityResponseCollection struct {
	Data []LibraryItemEntity     `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type LibraryItemFiltersInput struct {
	And                []*LibraryItemFiltersInput                              `json:"and,omitempty"`
	Categories         *CategoryFiltersInput                                   `json:"categories,omitempty"`
	Contents           *RangedContentFiltersInput                              `json:"contents,omitempty"`
	CreatedAt          *DateTimeFilterInput                                    `json:"createdAt,omitempty"`
	Descriptions       *ComponentTranslationsLibraryItemsFiltersInput          `json:"descriptions,omitempty"`
	Digital            *BooleanFilterInput                                     `json:"digital,omitempty"`
	Download_available *BooleanFilterInput                                     `json:"download_available,omitempty"`
	Id                 *IDFilterInput                                          `json:"id,omitempty"`
	Images             *ComponentCollectionsComponentLibraryImagesFiltersInput `json:"images,omitempty"`
	Not                *LibraryItemFiltersInput                                `json:"not,omitempty"`
	Or                 []*LibraryItemFiltersInput                              `json:"or,omitempty"`
	Price              *ComponentBasicsPriceFiltersInput                       `json:"price,omitempty"`
	Primary            *BooleanFilterInput                                     `json:"primary,omitempty"`
	Release_date       *ComponentBasicsDatepickerFiltersInput                  `json:"release_date,omitempty"`
	Root_item          *BooleanFilterInput                                     `json:"root_item,omitempty"`
	Size               *ComponentBasicsSizeFiltersInput                        `json:"size,omitempty"`
	Slug               *StringFilterInput                                      `json:"slug,omitempty"`
	Subitem_of         *LibraryItemFiltersInput                                `json:"subitem_of,omitempty"`
	Subitems           *LibraryItemFiltersInput                                `json:"subitems,omitempty"`
	Submerchs          *MerchItemFiltersInput                                  `json:"submerchs,omitempty"`
	Subtitle           *StringFilterInput                                      `json:"subtitle,omitempty"`
	Title              *StringFilterInput                                      `json:"title,omitempty"`
	UpdatedAt          *DateTimeFilterInput                                    `json:"updatedAt,omitempty"`
	Urls               *ComponentBasicsUrlFiltersInput                         `json:"urls,omitempty"`
}

type LibraryItemInput struct {
	Categories         []string                                           `json:"categories,omitempty"`
	Contents           []string                                           `json:"contents,omitempty"`
	Descriptions       []*ComponentTranslationsLibraryItemsInput          `json:"descriptions,omitempty"`
	Digital            *bool                                              `json:"digital,omitempty"`
	Download_available *bool                                              `json:"download_available,omitempty"`
	Gallery            []string                                           `json:"gallery,omitempty"`
	Images             []*ComponentCollectionsComponentLibraryImagesInput `json:"images,omitempty"`
	Metadata           []LibraryItemMetadataDynamicZoneInput              `json:"metadata,omitempty"`
	Price              *ComponentBasicsPriceInput                         `json:"price,omitempty"`
	Primary            *bool                                              `json:"primary,omitempty"`
	Release_date       *ComponentBasicsDatepickerInput                    `json:"release_date,omitempty"`
	Root_item          *bool                                              `json:"root_item,omitempty"`
	Size               *ComponentBasicsSizeInput                          `json:"size,omitempty"`
	Slug               *string                                            `json:"slug,omitempty"`
	Subitem_of         []string                                           `json:"subitem_of,omitempty"`
	Subitems           []string                                           `json:"subitems,omitempty"`
	Submerchs          []string                                           `json:"submerchs,omitempty"`
	Subtitle           *string                                            `json:"subtitle,omitempty"`
	Thumbnail          string                                             `json:"thumbnail,omitempty"`
	Title              *string                                            `json:"title,omitempty"`
	Urls               []*ComponentBasicsUrlInput                         `json:"urls,omitempty"`
}

type LibraryItemMetadataDynamicZone struct {
	// Underlying value of the GraphQL union
	Value LibraryItemMetadataDynamicZoneValue `json:"-"`
}

func (base *LibraryItemMetadataDynamicZone) UnmarshalJSON(b []byte) error {
	type Raw LibraryItemMetadataDynamicZone
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "ComponentMetadataAudio":
		base.Value = new(ComponentMetadataAudio)
	case "ComponentMetadataBooks":
		base.Value = new(ComponentMetadataBooks)
	case "ComponentMetadataGame":
		base.Value = new(ComponentMetadataGame)
	case "ComponentMetadataGroup":
		base.Value = new(ComponentMetadataGroup)
	case "ComponentMetadataOther":
		base.Value = new(ComponentMetadataOther)
	case "ComponentMetadataVideo":
		base.Value = new(ComponentMetadataVideo)
	case "Error":
		base.Value = new(Error)
	case "":
		return fmt.Errorf("gqlclient: union LibraryItemMetadataDynamicZone: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union LibraryItemMetadataDynamicZone: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// LibraryItemMetadataDynamicZoneValue is one of: ComponentMetadataAudio | ComponentMetadataBooks | ComponentMetadataGame | ComponentMetadataGroup | ComponentMetadataOther | ComponentMetadataVideo | Error
type LibraryItemMetadataDynamicZoneValue interface {
	isLibraryItemMetadataDynamicZone()
}

type LibraryItemMetadataDynamicZoneInput string

type LibraryItemRelationResponseCollection struct {
	Data []LibraryItemEntity `json:"data"`
}

type MerchItem struct {
	CreatedAt     *DateTime                              `json:"createdAt,omitempty"`
	Library_items *LibraryItemRelationResponseCollection `json:"library_items,omitempty"`
	Slug          string                                 `json:"slug"`
	Subtitle      *string                                `json:"subtitle,omitempty"`
	Thumbnail     *UploadFileEntityResponse              `json:"thumbnail,omitempty"`
	Title         string                                 `json:"title"`
	UpdatedAt     *DateTime                              `json:"updatedAt,omitempty"`
}

func (*MerchItem) isGenericMorph() {}

type MerchItemEntity struct {
	Attributes *MerchItem `json:"attributes,omitempty"`
	Id         string     `json:"id,omitempty"`
}

type MerchItemEntityResponse struct {
	Data *MerchItemEntity `json:"data,omitempty"`
}

type MerchItemEntityResponseCollection struct {
	Data []MerchItemEntity       `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type MerchItemFiltersInput struct {
	And           []*MerchItemFiltersInput `json:"and,omitempty"`
	CreatedAt     *DateTimeFilterInput     `json:"createdAt,omitempty"`
	Id            *IDFilterInput           `json:"id,omitempty"`
	Library_items *LibraryItemFiltersInput `json:"library_items,omitempty"`
	Not           *MerchItemFiltersInput   `json:"not,omitempty"`
	Or            []*MerchItemFiltersInput `json:"or,omitempty"`
	Slug          *StringFilterInput       `json:"slug,omitempty"`
	Subtitle      *StringFilterInput       `json:"subtitle,omitempty"`
	Title         *StringFilterInput       `json:"title,omitempty"`
	UpdatedAt     *DateTimeFilterInput     `json:"updatedAt,omitempty"`
}

type MerchItemInput struct {
	Library_items []string `json:"library_items,omitempty"`
	Slug          *string  `json:"slug,omitempty"`
	Subtitle      *string  `json:"subtitle,omitempty"`
	Thumbnail     string   `json:"thumbnail,omitempty"`
	Title         *string  `json:"title,omitempty"`
}

type MerchItemRelationResponseCollection struct {
	Data []MerchItemEntity `json:"data"`
}

type MetadataType struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*MetadataType) isGenericMorph() {}

type MetadataTypeEntity struct {
	Attributes *MetadataType `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type MetadataTypeEntityResponse struct {
	Data *MetadataTypeEntity `json:"data,omitempty"`
}

type MetadataTypeEntityResponseCollection struct {
	Data []MetadataTypeEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type MetadataTypeFiltersInput struct {
	And       []*MetadataTypeFiltersInput                   `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *MetadataTypeFiltersInput                     `json:"not,omitempty"`
	Or        []*MetadataTypeFiltersInput                   `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type MetadataTypeInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type Pagination struct {
	Page      int32 `json:"page"`
	PageCount int32 `json:"pageCount"`
	PageSize  int32 `json:"pageSize"`
	Total     int32 `json:"total"`
}

type PaginationArg struct {
	Limit    *int32 `json:"limit,omitempty"`
	Page     *int32 `json:"page,omitempty"`
	PageSize *int32 `json:"pageSize,omitempty"`
	Start    *int32 `json:"start,omitempty"`
}

type Post struct {
	Authors      *RecorderRelationResponseCollection `json:"authors,omitempty"`
	Categories   *CategoryRelationResponseCollection `json:"categories,omitempty"`
	CreatedAt    *DateTime                           `json:"createdAt,omitempty"`
	Date         *ComponentBasicsDatepicker          `json:"date"`
	Hidden       bool                                `json:"hidden"`
	Slug         string                              `json:"slug"`
	Thumbnail    *UploadFileEntityResponse           `json:"thumbnail,omitempty"`
	Translations []*ComponentTranslationsPosts       `json:"translations,omitempty"`
	UpdatedAt    *DateTime                           `json:"updatedAt,omitempty"`
}

func (*Post) isGenericMorph() {}

type PostEntity struct {
	Attributes *Post  `json:"attributes,omitempty"`
	Id         string `json:"id,omitempty"`
}

type PostEntityResponse struct {
	Data *PostEntity `json:"data,omitempty"`
}

type PostEntityResponseCollection struct {
	Data []PostEntity            `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type PostFiltersInput struct {
	And          []*PostFiltersInput                     `json:"and,omitempty"`
	Authors      *RecorderFiltersInput                   `json:"authors,omitempty"`
	Categories   *CategoryFiltersInput                   `json:"categories,omitempty"`
	CreatedAt    *DateTimeFilterInput                    `json:"createdAt,omitempty"`
	Date         *ComponentBasicsDatepickerFiltersInput  `json:"date,omitempty"`
	Hidden       *BooleanFilterInput                     `json:"hidden,omitempty"`
	Id           *IDFilterInput                          `json:"id,omitempty"`
	Not          *PostFiltersInput                       `json:"not,omitempty"`
	Or           []*PostFiltersInput                     `json:"or,omitempty"`
	Slug         *StringFilterInput                      `json:"slug,omitempty"`
	Translations *ComponentTranslationsPostsFiltersInput `json:"translations,omitempty"`
	UpdatedAt    *DateTimeFilterInput                    `json:"updatedAt,omitempty"`
}

type PostInput struct {
	Authors      []string                           `json:"authors,omitempty"`
	Categories   []string                           `json:"categories,omitempty"`
	Date         *ComponentBasicsDatepickerInput    `json:"date,omitempty"`
	Hidden       *bool                              `json:"hidden,omitempty"`
	Slug         *string                            `json:"slug,omitempty"`
	Thumbnail    string                             `json:"thumbnail,omitempty"`
	Translations []*ComponentTranslationsPostsInput `json:"translations,omitempty"`
}

type RangedContent struct {
	Content      *ContentEntityResponse           `json:"content,omitempty"`
	CreatedAt    *DateTime                        `json:"createdAt,omitempty"`
	Library_item *LibraryItemEntityResponse       `json:"library_item,omitempty"`
	Range        []*RangedContentRangeDynamicZone `json:"range"`
	Scan_set     []*ComponentSetsScanSet          `json:"scan_set,omitempty"`
	Slug         string                           `json:"slug"`
	UpdatedAt    *DateTime                        `json:"updatedAt,omitempty"`
}

func (*RangedContent) isGenericMorph() {}

type RangedContentEntity struct {
	Attributes *RangedContent `json:"attributes,omitempty"`
	Id         string         `json:"id,omitempty"`
}

type RangedContentEntityResponse struct {
	Data *RangedContentEntity `json:"data,omitempty"`
}

type RangedContentEntityResponseCollection struct {
	Data []RangedContentEntity   `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type RangedContentFiltersInput struct {
	And          []*RangedContentFiltersInput      `json:"and,omitempty"`
	Content      *ContentFiltersInput              `json:"content,omitempty"`
	CreatedAt    *DateTimeFilterInput              `json:"createdAt,omitempty"`
	Id           *IDFilterInput                    `json:"id,omitempty"`
	Library_item *LibraryItemFiltersInput          `json:"library_item,omitempty"`
	Not          *RangedContentFiltersInput        `json:"not,omitempty"`
	Or           []*RangedContentFiltersInput      `json:"or,omitempty"`
	Scan_set     *ComponentSetsScanSetFiltersInput `json:"scan_set,omitempty"`
	Slug         *StringFilterInput                `json:"slug,omitempty"`
	UpdatedAt    *DateTimeFilterInput              `json:"updatedAt,omitempty"`
}

type RangedContentInput struct {
	Content      string                               `json:"content,omitempty"`
	Library_item string                               `json:"library_item,omitempty"`
	Range        []RangedContentRangeDynamicZoneInput `json:"range,omitempty"`
	Scan_set     []*ComponentSetsScanSetInput         `json:"scan_set,omitempty"`
	Slug         *string                              `json:"slug,omitempty"`
}

type RangedContentRangeDynamicZone struct {
	// Underlying value of the GraphQL union
	Value RangedContentRangeDynamicZoneValue `json:"-"`
}

func (base *RangedContentRangeDynamicZone) UnmarshalJSON(b []byte) error {
	type Raw RangedContentRangeDynamicZone
	var data struct {
		*Raw
		TypeName string `json:"__typename"`
	}
	data.Raw = (*Raw)(base)
	err := json.Unmarshal(b, &data)
	if err != nil {
		return err
	}
	switch data.TypeName {
	case "ComponentRangeOther":
		base.Value = new(ComponentRangeOther)
	case "ComponentRangePageRange":
		base.Value = new(ComponentRangePageRange)
	case "ComponentRangeTimeRange":
		base.Value = new(ComponentRangeTimeRange)
	case "Error":
		base.Value = new(Error)
	case "":
		return fmt.Errorf("gqlclient: union RangedContentRangeDynamicZone: missing __typename field")
	default:
		return fmt.Errorf("gqlclient: union RangedContentRangeDynamicZone: unknown __typename %q", data.TypeName)
	}
	return json.Unmarshal(b, base.Value)
}

// RangedContentRangeDynamicZoneValue is one of: ComponentRangeOther | ComponentRangePageRange | ComponentRangeTimeRange | Error
type RangedContentRangeDynamicZoneValue interface {
	isRangedContentRangeDynamicZone()
}

type RangedContentRangeDynamicZoneInput string

type RangedContentRelationResponseCollection struct {
	Data []RangedContentEntity `json:"data"`
}

type Recorder struct {
	Anonymize      bool                                `json:"anonymize"`
	Anonymous_code string                              `json:"anonymous_code"`
	Avatar         *UploadFileEntityResponse           `json:"avatar,omitempty"`
	Bio            []*ComponentTranslationsBio         `json:"bio,omitempty"`
	CreatedAt      *DateTime                           `json:"createdAt,omitempty"`
	Languages      *LanguageRelationResponseCollection `json:"languages,omitempty"`
	Pronouns       *string                             `json:"pronouns,omitempty"`
	UpdatedAt      *DateTime                           `json:"updatedAt,omitempty"`
	Username       string                              `json:"username"`
}

func (*Recorder) isGenericMorph() {}

type RecorderEntity struct {
	Attributes *Recorder `json:"attributes,omitempty"`
	Id         string    `json:"id,omitempty"`
}

type RecorderEntityResponse struct {
	Data *RecorderEntity `json:"data,omitempty"`
}

type RecorderEntityResponseCollection struct {
	Data []RecorderEntity        `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type RecorderFiltersInput struct {
	And            []*RecorderFiltersInput               `json:"and,omitempty"`
	Anonymize      *BooleanFilterInput                   `json:"anonymize,omitempty"`
	Anonymous_code *StringFilterInput                    `json:"anonymous_code,omitempty"`
	Bio            *ComponentTranslationsBioFiltersInput `json:"bio,omitempty"`
	CreatedAt      *DateTimeFilterInput                  `json:"createdAt,omitempty"`
	Id             *IDFilterInput                        `json:"id,omitempty"`
	Languages      *LanguageFiltersInput                 `json:"languages,omitempty"`
	Not            *RecorderFiltersInput                 `json:"not,omitempty"`
	Or             []*RecorderFiltersInput               `json:"or,omitempty"`
	Pronouns       *StringFilterInput                    `json:"pronouns,omitempty"`
	UpdatedAt      *DateTimeFilterInput                  `json:"updatedAt,omitempty"`
	Username       *StringFilterInput                    `json:"username,omitempty"`
}

type RecorderInput struct {
	Anonymize      *bool                            `json:"anonymize,omitempty"`
	Anonymous_code *string                          `json:"anonymous_code,omitempty"`
	Avatar         string                           `json:"avatar,omitempty"`
	Bio            []*ComponentTranslationsBioInput `json:"bio,omitempty"`
	Languages      []string                         `json:"languages,omitempty"`
	Pronouns       *string                          `json:"pronouns,omitempty"`
	Username       *string                          `json:"username,omitempty"`
}

type RecorderRelationResponseCollection struct {
	Data []RecorderEntity `json:"data"`
}

type ReinCostume struct {
	CreatedAt    *DateTime                            `json:"createdAt,omitempty"`
	Emblem       *ReinEmblemEntityResponse            `json:"emblem,omitempty"`
	Slug         string                               `json:"slug"`
	Sprite       *UploadFileEntityResponse            `json:"sprite,omitempty"`
	Thumbnail    *UploadFileEntityResponse            `json:"thumbnail,omitempty"`
	Translations []*ComponentTranslationsReinCostumes `json:"translations,omitempty"`
	UpdatedAt    *DateTime                            `json:"updatedAt,omitempty"`
}

func (*ReinCostume) isGenericMorph() {}

type ReinCostumeEntity struct {
	Attributes *ReinCostume `json:"attributes,omitempty"`
	Id         string       `json:"id,omitempty"`
}

type ReinCostumeEntityResponse struct {
	Data *ReinCostumeEntity `json:"data,omitempty"`
}

type ReinCostumeEntityResponseCollection struct {
	Data []ReinCostumeEntity     `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ReinCostumeFiltersInput struct {
	And          []*ReinCostumeFiltersInput                     `json:"and,omitempty"`
	CreatedAt    *DateTimeFilterInput                           `json:"createdAt,omitempty"`
	Emblem       *ReinEmblemFiltersInput                        `json:"emblem,omitempty"`
	Id           *IDFilterInput                                 `json:"id,omitempty"`
	Not          *ReinCostumeFiltersInput                       `json:"not,omitempty"`
	Or           []*ReinCostumeFiltersInput                     `json:"or,omitempty"`
	Slug         *StringFilterInput                             `json:"slug,omitempty"`
	Translations *ComponentTranslationsReinCostumesFiltersInput `json:"translations,omitempty"`
	UpdatedAt    *DateTimeFilterInput                           `json:"updatedAt,omitempty"`
}

type ReinCostumeInput struct {
	Emblem       string                                    `json:"emblem,omitempty"`
	Slug         *string                                   `json:"slug,omitempty"`
	Sprite       string                                    `json:"sprite,omitempty"`
	Thumbnail    string                                    `json:"thumbnail,omitempty"`
	Translations []*ComponentTranslationsReinCostumesInput `json:"translations,omitempty"`
}

type ReinCostumeRelationResponseCollection struct {
	Data []ReinCostumeEntity `json:"data"`
}

type ReinEmblem struct {
	Costumes     *ReinCostumeRelationResponseCollection `json:"costumes,omitempty"`
	CreatedAt    *DateTime                              `json:"createdAt,omitempty"`
	Slug         string                                 `json:"slug"`
	Translations []*ComponentTranslationsReinEmblems    `json:"translations,omitempty"`
	UpdatedAt    *DateTime                              `json:"updatedAt,omitempty"`
}

func (*ReinEmblem) isGenericMorph() {}

type ReinEmblemEntity struct {
	Attributes *ReinEmblem `json:"attributes,omitempty"`
	Id         string      `json:"id,omitempty"`
}

type ReinEmblemEntityResponse struct {
	Data *ReinEmblemEntity `json:"data,omitempty"`
}

type ReinEmblemEntityResponseCollection struct {
	Data []ReinEmblemEntity      `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type ReinEmblemFiltersInput struct {
	And          []*ReinEmblemFiltersInput                     `json:"and,omitempty"`
	Costumes     *ReinCostumeFiltersInput                      `json:"costumes,omitempty"`
	CreatedAt    *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id           *IDFilterInput                                `json:"id,omitempty"`
	Not          *ReinEmblemFiltersInput                       `json:"not,omitempty"`
	Or           []*ReinEmblemFiltersInput                     `json:"or,omitempty"`
	Slug         *StringFilterInput                            `json:"slug,omitempty"`
	Translations *ComponentTranslationsReinEmblemsFiltersInput `json:"translations,omitempty"`
	UpdatedAt    *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type ReinEmblemInput struct {
	Costumes     []string                                 `json:"costumes,omitempty"`
	Slug         *string                                  `json:"slug,omitempty"`
	Translations []*ComponentTranslationsReinEmblemsInput `json:"translations,omitempty"`
}

type ResponseCollectionMeta struct {
	Pagination *Pagination `json:"pagination"`
}

type Source struct {
	Content        *ContentEntityResponse       `json:"content,omitempty"`
	CreatedAt      *DateTime                    `json:"createdAt,omitempty"`
	Name           string                       `json:"name"`
	Ranged_content *RangedContentEntityResponse `json:"ranged_content,omitempty"`
	UpdatedAt      *DateTime                    `json:"updatedAt,omitempty"`
}

func (*Source) isGenericMorph() {}

type SourceEntity struct {
	Attributes *Source `json:"attributes,omitempty"`
	Id         string  `json:"id,omitempty"`
}

type SourceEntityResponse struct {
	Data *SourceEntity `json:"data,omitempty"`
}

type SourceEntityResponseCollection struct {
	Data []SourceEntity          `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type SourceFiltersInput struct {
	And            []*SourceFiltersInput      `json:"and,omitempty"`
	Content        *ContentFiltersInput       `json:"content,omitempty"`
	CreatedAt      *DateTimeFilterInput       `json:"createdAt,omitempty"`
	Id             *IDFilterInput             `json:"id,omitempty"`
	Name           *StringFilterInput         `json:"name,omitempty"`
	Not            *SourceFiltersInput        `json:"not,omitempty"`
	Or             []*SourceFiltersInput      `json:"or,omitempty"`
	Ranged_content *RangedContentFiltersInput `json:"ranged_content,omitempty"`
	UpdatedAt      *DateTimeFilterInput       `json:"updatedAt,omitempty"`
}

type SourceInput struct {
	Content        string  `json:"content,omitempty"`
	Name           *string `json:"name,omitempty"`
	Ranged_content string  `json:"ranged_content,omitempty"`
}

type StringFilterInput struct {
	And          []*string          `json:"and,omitempty"`
	Between      []*string          `json:"between,omitempty"`
	Contains     *string            `json:"contains,omitempty"`
	Containsi    *string            `json:"containsi,omitempty"`
	EndsWith     *string            `json:"endsWith,omitempty"`
	Eq           *string            `json:"eq,omitempty"`
	Eqi          *string            `json:"eqi,omitempty"`
	Gt           *string            `json:"gt,omitempty"`
	Gte          *string            `json:"gte,omitempty"`
	In           []*string          `json:"in,omitempty"`
	Lt           *string            `json:"lt,omitempty"`
	Lte          *string            `json:"lte,omitempty"`
	Ne           *string            `json:"ne,omitempty"`
	Not          *StringFilterInput `json:"not,omitempty"`
	NotContains  *string            `json:"notContains,omitempty"`
	NotContainsi *string            `json:"notContainsi,omitempty"`
	NotIn        []*string          `json:"notIn,omitempty"`
	NotNull      *bool              `json:"notNull,omitempty"`
	Null         *bool              `json:"null,omitempty"`
	Or           []*string          `json:"or,omitempty"`
	StartsWith   *string            `json:"startsWith,omitempty"`
}

type TextualSubtype struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*TextualSubtype) isGenericMorph() {}

type TextualSubtypeEntity struct {
	Attributes *TextualSubtype `json:"attributes,omitempty"`
	Id         string          `json:"id,omitempty"`
}

type TextualSubtypeEntityResponse struct {
	Data *TextualSubtypeEntity `json:"data,omitempty"`
}

type TextualSubtypeEntityResponseCollection struct {
	Data []TextualSubtypeEntity  `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type TextualSubtypeFiltersInput struct {
	And       []*TextualSubtypeFiltersInput                 `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *TextualSubtypeFiltersInput                   `json:"not,omitempty"`
	Or        []*TextualSubtypeFiltersInput                 `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type TextualSubtypeInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type UploadFile struct {
	AlternativeText   *string         `json:"alternativeText,omitempty"`
	Caption           *string         `json:"caption,omitempty"`
	CreatedAt         *DateTime       `json:"createdAt,omitempty"`
	Ext               *string         `json:"ext,omitempty"`
	Formats           *JSON           `json:"formats,omitempty"`
	Hash              string          `json:"hash"`
	Height            *int32          `json:"height,omitempty"`
	Mime              string          `json:"mime"`
	Name              string          `json:"name"`
	PreviewUrl        *string         `json:"previewUrl,omitempty"`
	Provider          string          `json:"provider"`
	Provider_metadata *JSON           `json:"provider_metadata,omitempty"`
	Related           []*GenericMorph `json:"related,omitempty"`
	Size              float64         `json:"size"`
	UpdatedAt         *DateTime       `json:"updatedAt,omitempty"`
	Url               string          `json:"url"`
	Width             *int32          `json:"width,omitempty"`
}

func (*UploadFile) isGenericMorph() {}

type UploadFileEntity struct {
	Attributes *UploadFile `json:"attributes,omitempty"`
	Id         string      `json:"id,omitempty"`
}

type UploadFileEntityResponse struct {
	Data *UploadFileEntity `json:"data,omitempty"`
}

type UploadFileEntityResponseCollection struct {
	Data []UploadFileEntity      `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type UploadFileFiltersInput struct {
	AlternativeText   *StringFilterInput        `json:"alternativeText,omitempty"`
	And               []*UploadFileFiltersInput `json:"and,omitempty"`
	Caption           *StringFilterInput        `json:"caption,omitempty"`
	CreatedAt         *DateTimeFilterInput      `json:"createdAt,omitempty"`
	Ext               *StringFilterInput        `json:"ext,omitempty"`
	Folder            *UploadFolderFiltersInput `json:"folder,omitempty"`
	FolderPath        *StringFilterInput        `json:"folderPath,omitempty"`
	Formats           *JSONFilterInput          `json:"formats,omitempty"`
	Hash              *StringFilterInput        `json:"hash,omitempty"`
	Height            *IntFilterInput           `json:"height,omitempty"`
	Id                *IDFilterInput            `json:"id,omitempty"`
	Mime              *StringFilterInput        `json:"mime,omitempty"`
	Name              *StringFilterInput        `json:"name,omitempty"`
	Not               *UploadFileFiltersInput   `json:"not,omitempty"`
	Or                []*UploadFileFiltersInput `json:"or,omitempty"`
	PreviewUrl        *StringFilterInput        `json:"previewUrl,omitempty"`
	Provider          *StringFilterInput        `json:"provider,omitempty"`
	Provider_metadata *JSONFilterInput          `json:"provider_metadata,omitempty"`
	Size              *FloatFilterInput         `json:"size,omitempty"`
	UpdatedAt         *DateTimeFilterInput      `json:"updatedAt,omitempty"`
	Url               *StringFilterInput        `json:"url,omitempty"`
	Width             *IntFilterInput           `json:"width,omitempty"`
}

type UploadFileInput struct {
	AlternativeText   *string  `json:"alternativeText,omitempty"`
	Caption           *string  `json:"caption,omitempty"`
	Ext               *string  `json:"ext,omitempty"`
	Folder            string   `json:"folder,omitempty"`
	FolderPath        *string  `json:"folderPath,omitempty"`
	Formats           *JSON    `json:"formats,omitempty"`
	Hash              *string  `json:"hash,omitempty"`
	Height            *int32   `json:"height,omitempty"`
	Mime              *string  `json:"mime,omitempty"`
	Name              *string  `json:"name,omitempty"`
	PreviewUrl        *string  `json:"previewUrl,omitempty"`
	Provider          *string  `json:"provider,omitempty"`
	Provider_metadata *JSON    `json:"provider_metadata,omitempty"`
	Size              *float64 `json:"size,omitempty"`
	Url               *string  `json:"url,omitempty"`
	Width             *int32   `json:"width,omitempty"`
}

type UploadFileRelationResponseCollection struct {
	Data []UploadFileEntity `json:"data"`
}

type UploadFolder struct {
	Children  *UploadFolderRelationResponseCollection `json:"children,omitempty"`
	CreatedAt *DateTime                               `json:"createdAt,omitempty"`
	Files     *UploadFileRelationResponseCollection   `json:"files,omitempty"`
	Name      string                                  `json:"name"`
	Parent    *UploadFolderEntityResponse             `json:"parent,omitempty"`
	Path      string                                  `json:"path"`
	PathId    int32                                   `json:"pathId"`
	UpdatedAt *DateTime                               `json:"updatedAt,omitempty"`
}

func (*UploadFolder) isGenericMorph() {}

type UploadFolderEntity struct {
	Attributes *UploadFolder `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type UploadFolderEntityResponse struct {
	Data *UploadFolderEntity `json:"data,omitempty"`
}

type UploadFolderEntityResponseCollection struct {
	Data []UploadFolderEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type UploadFolderFiltersInput struct {
	And       []*UploadFolderFiltersInput `json:"and,omitempty"`
	Children  *UploadFolderFiltersInput   `json:"children,omitempty"`
	CreatedAt *DateTimeFilterInput        `json:"createdAt,omitempty"`
	Files     *UploadFileFiltersInput     `json:"files,omitempty"`
	Id        *IDFilterInput              `json:"id,omitempty"`
	Name      *StringFilterInput          `json:"name,omitempty"`
	Not       *UploadFolderFiltersInput   `json:"not,omitempty"`
	Or        []*UploadFolderFiltersInput `json:"or,omitempty"`
	Parent    *UploadFolderFiltersInput   `json:"parent,omitempty"`
	Path      *StringFilterInput          `json:"path,omitempty"`
	PathId    *IntFilterInput             `json:"pathId,omitempty"`
	UpdatedAt *DateTimeFilterInput        `json:"updatedAt,omitempty"`
}

type UploadFolderInput struct {
	Children []string `json:"children,omitempty"`
	Files    []string `json:"files,omitempty"`
	Name     *string  `json:"name,omitempty"`
	Parent   string   `json:"parent,omitempty"`
	Path     *string  `json:"path,omitempty"`
	PathId   *int32   `json:"pathId,omitempty"`
}

type UploadFolderRelationResponseCollection struct {
	Data []UploadFolderEntity `json:"data"`
}

type Video struct {
	Audio_languages *LanguageRelationResponseCollection `json:"audio_languages,omitempty"`
	Categories      *CategoryRelationResponseCollection `json:"categories,omitempty"`
	Channel         *VideoChannelEntityResponse         `json:"channel,omitempty"`
	CreatedAt       *DateTime                           `json:"createdAt,omitempty"`
	Description     string                              `json:"description"`
	Duration        int32                               `json:"duration"`
	Gone            bool                                `json:"gone"`
	Height          int32                               `json:"height"`
	Likes           int32                               `json:"likes"`
	Live_chat       bool                                `json:"live_chat"`
	Published_date  *ComponentBasicsDatepicker          `json:"published_date"`
	Source          *ENUM_VIDEO_SOURCE                  `json:"source,omitempty"`
	Sub_languages   *LanguageRelationResponseCollection `json:"sub_languages,omitempty"`
	Title           string                              `json:"title"`
	Uid             string                              `json:"uid"`
	UpdatedAt       *DateTime                           `json:"updatedAt,omitempty"`
	Views           int32                               `json:"views"`
	Width           int32                               `json:"width"`
}

func (*Video) isGenericMorph() {}

type VideoChannel struct {
	CreatedAt   *DateTime                        `json:"createdAt,omitempty"`
	Subscribers int32                            `json:"subscribers"`
	Title       string                           `json:"title"`
	Uid         string                           `json:"uid"`
	UpdatedAt   *DateTime                        `json:"updatedAt,omitempty"`
	Videos      *VideoRelationResponseCollection `json:"videos,omitempty"`
}

func (*VideoChannel) isGenericMorph() {}

type VideoChannelEntity struct {
	Attributes *VideoChannel `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type VideoChannelEntityResponse struct {
	Data *VideoChannelEntity `json:"data,omitempty"`
}

type VideoChannelEntityResponseCollection struct {
	Data []VideoChannelEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type VideoChannelFiltersInput struct {
	And         []*VideoChannelFiltersInput `json:"and,omitempty"`
	CreatedAt   *DateTimeFilterInput        `json:"createdAt,omitempty"`
	Id          *IDFilterInput              `json:"id,omitempty"`
	Not         *VideoChannelFiltersInput   `json:"not,omitempty"`
	Or          []*VideoChannelFiltersInput `json:"or,omitempty"`
	Subscribers *IntFilterInput             `json:"subscribers,omitempty"`
	Title       *StringFilterInput          `json:"title,omitempty"`
	Uid         *StringFilterInput          `json:"uid,omitempty"`
	UpdatedAt   *DateTimeFilterInput        `json:"updatedAt,omitempty"`
	Videos      *VideoFiltersInput          `json:"videos,omitempty"`
}

type VideoChannelInput struct {
	Subscribers *int32   `json:"subscribers,omitempty"`
	Title       *string  `json:"title,omitempty"`
	Uid         *string  `json:"uid,omitempty"`
	Videos      []string `json:"videos,omitempty"`
}

type VideoEntity struct {
	Attributes *Video `json:"attributes,omitempty"`
	Id         string `json:"id,omitempty"`
}

type VideoEntityResponse struct {
	Data *VideoEntity `json:"data,omitempty"`
}

type VideoEntityResponseCollection struct {
	Data []VideoEntity           `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type VideoFiltersInput struct {
	And             []*VideoFiltersInput                   `json:"and,omitempty"`
	Audio_languages *LanguageFiltersInput                  `json:"audio_languages,omitempty"`
	Categories      *CategoryFiltersInput                  `json:"categories,omitempty"`
	Channel         *VideoChannelFiltersInput              `json:"channel,omitempty"`
	CreatedAt       *DateTimeFilterInput                   `json:"createdAt,omitempty"`
	Description     *StringFilterInput                     `json:"description,omitempty"`
	Duration        *IntFilterInput                        `json:"duration,omitempty"`
	Gone            *BooleanFilterInput                    `json:"gone,omitempty"`
	Height          *IntFilterInput                        `json:"height,omitempty"`
	Id              *IDFilterInput                         `json:"id,omitempty"`
	Likes           *IntFilterInput                        `json:"likes,omitempty"`
	Live_chat       *BooleanFilterInput                    `json:"live_chat,omitempty"`
	Not             *VideoFiltersInput                     `json:"not,omitempty"`
	Or              []*VideoFiltersInput                   `json:"or,omitempty"`
	Published_date  *ComponentBasicsDatepickerFiltersInput `json:"published_date,omitempty"`
	Source          *StringFilterInput                     `json:"source,omitempty"`
	Sub_languages   *LanguageFiltersInput                  `json:"sub_languages,omitempty"`
	Title           *StringFilterInput                     `json:"title,omitempty"`
	Uid             *StringFilterInput                     `json:"uid,omitempty"`
	UpdatedAt       *DateTimeFilterInput                   `json:"updatedAt,omitempty"`
	Views           *IntFilterInput                        `json:"views,omitempty"`
	Width           *IntFilterInput                        `json:"width,omitempty"`
}

type VideoInput struct {
	Audio_languages []string                        `json:"audio_languages,omitempty"`
	Categories      []string                        `json:"categories,omitempty"`
	Channel         string                          `json:"channel,omitempty"`
	Description     *string                         `json:"description,omitempty"`
	Duration        *int32                          `json:"duration,omitempty"`
	Gone            *bool                           `json:"gone,omitempty"`
	Height          *int32                          `json:"height,omitempty"`
	Likes           *int32                          `json:"likes,omitempty"`
	Live_chat       *bool                           `json:"live_chat,omitempty"`
	Published_date  *ComponentBasicsDatepickerInput `json:"published_date,omitempty"`
	Source          *ENUM_VIDEO_SOURCE              `json:"source,omitempty"`
	Sub_languages   []string                        `json:"sub_languages,omitempty"`
	Title           *string                         `json:"title,omitempty"`
	Uid             *string                         `json:"uid,omitempty"`
	Views           *int32                          `json:"views,omitempty"`
	Width           *int32                          `json:"width,omitempty"`
}

type VideoRelationResponseCollection struct {
	Data []VideoEntity `json:"data"`
}

type VideoSubtype struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*VideoSubtype) isGenericMorph() {}

type VideoSubtypeEntity struct {
	Attributes *VideoSubtype `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type VideoSubtypeEntityResponse struct {
	Data *VideoSubtypeEntity `json:"data,omitempty"`
}

type VideoSubtypeEntityResponseCollection struct {
	Data []VideoSubtypeEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type VideoSubtypeFiltersInput struct {
	And       []*VideoSubtypeFiltersInput                   `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *VideoSubtypeFiltersInput                     `json:"not,omitempty"`
	Or        []*VideoSubtypeFiltersInput                   `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type VideoSubtypeInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type WeaponStory struct {
	CreatedAt    *DateTime                                   `json:"createdAt,omitempty"`
	Name         []*ComponentTranslationsWeaponStory         `json:"name,omitempty"`
	Slug         string                                      `json:"slug"`
	Stories      []*ComponentCollectionsComponentWeaponStory `json:"stories,omitempty"`
	Thumbnail    *UploadFileEntityResponse                   `json:"thumbnail,omitempty"`
	Type         *WeaponStoryTypeEntityResponse              `json:"type,omitempty"`
	UpdatedAt    *DateTime                                   `json:"updatedAt,omitempty"`
	Weapon_group *WeaponStoryGroupEntityResponse             `json:"weapon_group,omitempty"`
	Wiki_page    *WikiPageEntityResponse                     `json:"wiki_page,omitempty"`
}

func (*WeaponStory) isGenericMorph() {}

type WeaponStoryEntity struct {
	Attributes *WeaponStory `json:"attributes,omitempty"`
	Id         string       `json:"id,omitempty"`
}

type WeaponStoryEntityResponse struct {
	Data *WeaponStoryEntity `json:"data,omitempty"`
}

type WeaponStoryEntityResponseCollection struct {
	Data []WeaponStoryEntity     `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type WeaponStoryFiltersInput struct {
	And          []*WeaponStoryFiltersInput                            `json:"and,omitempty"`
	CreatedAt    *DateTimeFilterInput                                  `json:"createdAt,omitempty"`
	Id           *IDFilterInput                                        `json:"id,omitempty"`
	Name         *ComponentTranslationsWeaponStoryFiltersInput         `json:"name,omitempty"`
	Not          *WeaponStoryFiltersInput                              `json:"not,omitempty"`
	Or           []*WeaponStoryFiltersInput                            `json:"or,omitempty"`
	Slug         *StringFilterInput                                    `json:"slug,omitempty"`
	Stories      *ComponentCollectionsComponentWeaponStoryFiltersInput `json:"stories,omitempty"`
	Type         *WeaponStoryTypeFiltersInput                          `json:"type,omitempty"`
	UpdatedAt    *DateTimeFilterInput                                  `json:"updatedAt,omitempty"`
	Weapon_group *WeaponStoryGroupFiltersInput                         `json:"weapon_group,omitempty"`
	Wiki_page    *WikiPageFiltersInput                                 `json:"wiki_page,omitempty"`
}

type WeaponStoryGroup struct {
	CreatedAt   *DateTime                                   `json:"createdAt,omitempty"`
	Slug        string                                      `json:"slug"`
	Subgroup_of *WeaponStoryGroupEntityResponse             `json:"subgroup_of,omitempty"`
	Subgroups   *WeaponStoryGroupRelationResponseCollection `json:"subgroups,omitempty"`
	UpdatedAt   *DateTime                                   `json:"updatedAt,omitempty"`
	Weapons     *WeaponStoryRelationResponseCollection      `json:"weapons,omitempty"`
}

func (*WeaponStoryGroup) isGenericMorph() {}

type WeaponStoryGroupEntity struct {
	Attributes *WeaponStoryGroup `json:"attributes,omitempty"`
	Id         string            `json:"id,omitempty"`
}

type WeaponStoryGroupEntityResponse struct {
	Data *WeaponStoryGroupEntity `json:"data,omitempty"`
}

type WeaponStoryGroupEntityResponseCollection struct {
	Data []WeaponStoryGroupEntity `json:"data"`
	Meta *ResponseCollectionMeta  `json:"meta"`
}

type WeaponStoryGroupFiltersInput struct {
	And         []*WeaponStoryGroupFiltersInput `json:"and,omitempty"`
	CreatedAt   *DateTimeFilterInput            `json:"createdAt,omitempty"`
	Id          *IDFilterInput                  `json:"id,omitempty"`
	Not         *WeaponStoryGroupFiltersInput   `json:"not,omitempty"`
	Or          []*WeaponStoryGroupFiltersInput `json:"or,omitempty"`
	Slug        *StringFilterInput              `json:"slug,omitempty"`
	Subgroup_of *WeaponStoryGroupFiltersInput   `json:"subgroup_of,omitempty"`
	Subgroups   *WeaponStoryGroupFiltersInput   `json:"subgroups,omitempty"`
	UpdatedAt   *DateTimeFilterInput            `json:"updatedAt,omitempty"`
	Weapons     *WeaponStoryFiltersInput        `json:"weapons,omitempty"`
}

type WeaponStoryGroupInput struct {
	Slug        *string  `json:"slug,omitempty"`
	Subgroup_of string   `json:"subgroup_of,omitempty"`
	Subgroups   []string `json:"subgroups,omitempty"`
	Weapons     []string `json:"weapons,omitempty"`
}

type WeaponStoryGroupRelationResponseCollection struct {
	Data []WeaponStoryGroupEntity `json:"data"`
}

type WeaponStoryInput struct {
	Name         []*ComponentTranslationsWeaponStoryInput         `json:"name,omitempty"`
	Slug         *string                                          `json:"slug,omitempty"`
	Stories      []*ComponentCollectionsComponentWeaponStoryInput `json:"stories,omitempty"`
	Thumbnail    string                                           `json:"thumbnail,omitempty"`
	Type         string                                           `json:"type,omitempty"`
	Weapon_group string                                           `json:"weapon_group,omitempty"`
	Wiki_page    string                                           `json:"wiki_page,omitempty"`
}

type WeaponStoryRelationResponseCollection struct {
	Data []WeaponStoryEntity `json:"data"`
}

type WeaponStoryType struct {
	CreatedAt    *DateTime                               `json:"createdAt,omitempty"`
	Slug         string                                  `json:"slug"`
	Translations []*ComponentTranslationsWeaponStoryType `json:"translations,omitempty"`
	UpdatedAt    *DateTime                               `json:"updatedAt,omitempty"`
}

func (*WeaponStoryType) isGenericMorph() {}

type WeaponStoryTypeEntity struct {
	Attributes *WeaponStoryType `json:"attributes,omitempty"`
	Id         string           `json:"id,omitempty"`
}

type WeaponStoryTypeEntityResponse struct {
	Data *WeaponStoryTypeEntity `json:"data,omitempty"`
}

type WeaponStoryTypeEntityResponseCollection struct {
	Data []WeaponStoryTypeEntity `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type WeaponStoryTypeFiltersInput struct {
	And          []*WeaponStoryTypeFiltersInput                    `json:"and,omitempty"`
	CreatedAt    *DateTimeFilterInput                              `json:"createdAt,omitempty"`
	Id           *IDFilterInput                                    `json:"id,omitempty"`
	Not          *WeaponStoryTypeFiltersInput                      `json:"not,omitempty"`
	Or           []*WeaponStoryTypeFiltersInput                    `json:"or,omitempty"`
	Slug         *StringFilterInput                                `json:"slug,omitempty"`
	Translations *ComponentTranslationsWeaponStoryTypeFiltersInput `json:"translations,omitempty"`
	UpdatedAt    *DateTimeFilterInput                              `json:"updatedAt,omitempty"`
}

type WeaponStoryTypeInput struct {
	Slug         *string                                      `json:"slug,omitempty"`
	Translations []*ComponentTranslationsWeaponStoryTypeInput `json:"translations,omitempty"`
}

type WebArchive struct {
	Author       *string                             `json:"author,omitempty"`
	CreatedAt    *DateTime                           `json:"createdAt,omitempty"`
	Date         *ComponentBasicsDatepicker          `json:"date"`
	Descriptions []*ComponentTranslationsWebArchives `json:"descriptions,omitempty"`
	Format       ENUM_WEBARCHIVE_FORMAT              `json:"format"`
	Num_pages    *int32                              `json:"num_pages,omitempty"`
	Size         *ComponentBasicsFileSize            `json:"size"`
	Source_url   string                              `json:"source_url"`
	Still_online bool                                `json:"still_online"`
	Type         ENUM_WEBARCHIVE_TYPE                `json:"type"`
	UpdatedAt    *DateTime                           `json:"updatedAt,omitempty"`
}

func (*WebArchive) isGenericMorph() {}

type WebArchiveEntity struct {
	Attributes *WebArchive `json:"attributes,omitempty"`
	Id         string      `json:"id,omitempty"`
}

type WebArchiveEntityResponse struct {
	Data *WebArchiveEntity `json:"data,omitempty"`
}

type WebArchiveEntityResponseCollection struct {
	Data []WebArchiveEntity      `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type WebArchiveFiltersInput struct {
	And          []*WebArchiveFiltersInput                     `json:"and,omitempty"`
	Author       *StringFilterInput                            `json:"author,omitempty"`
	CreatedAt    *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Date         *ComponentBasicsDatepickerFiltersInput        `json:"date,omitempty"`
	Descriptions *ComponentTranslationsWebArchivesFiltersInput `json:"descriptions,omitempty"`
	Format       *StringFilterInput                            `json:"format,omitempty"`
	Id           *IDFilterInput                                `json:"id,omitempty"`
	Not          *WebArchiveFiltersInput                       `json:"not,omitempty"`
	Num_pages    *IntFilterInput                               `json:"num_pages,omitempty"`
	Or           []*WebArchiveFiltersInput                     `json:"or,omitempty"`
	Size         *ComponentBasicsFileSizeFiltersInput          `json:"size,omitempty"`
	Source_url   *StringFilterInput                            `json:"source_url,omitempty"`
	Still_online *BooleanFilterInput                           `json:"still_online,omitempty"`
	Type         *StringFilterInput                            `json:"type,omitempty"`
	UpdatedAt    *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type WebArchiveInput struct {
	Author       *string                                  `json:"author,omitempty"`
	Date         *ComponentBasicsDatepickerInput          `json:"date,omitempty"`
	Descriptions []*ComponentTranslationsWebArchivesInput `json:"descriptions,omitempty"`
	Format       *ENUM_WEBARCHIVE_FORMAT                  `json:"format,omitempty"`
	Num_pages    *int32                                   `json:"num_pages,omitempty"`
	Size         *ComponentBasicsFileSizeInput            `json:"size,omitempty"`
	Source_url   *string                                  `json:"source_url,omitempty"`
	Still_online *bool                                    `json:"still_online,omitempty"`
	Type         *ENUM_WEBARCHIVE_TYPE                    `json:"type,omitempty"`
}

type WebsiteInterface struct {
	About_us                     *string                 `json:"about_us,omitempty"`
	About_us_description         *string                 `json:"about_us_description,omitempty"`
	Accords_handbook             *string                 `json:"accords_handbook,omitempty"`
	All                          *string                 `json:"all,omitempty"`
	Always_show_info             *string                 `json:"always_show_info,omitempty"`
	Anchor_link_copied           *string                 `json:"anchor_link_copied,omitempty"`
	Archives                     *string                 `json:"archives,omitempty"`
	Archives_description         *string                 `json:"archives_description,omitempty"`
	Audio                        *string                 `json:"audio,omitempty"`
	Author                       *string                 `json:"author,omitempty"`
	Auto                         *string                 `json:"auto,omitempty"`
	Available_at                 *string                 `json:"available_at,omitempty"`
	Available_at_x               *string                 `json:"available_at_x,omitempty"`
	Back_matter                  *string                 `json:"back_matter,omitempty"`
	Binding                      *string                 `json:"binding,omitempty"`
	Book_fold                    *string                 `json:"book_fold,omitempty"`
	Calculated                   *string                 `json:"calculated,omitempty"`
	Category                     *string                 `json:"category,omitempty"`
	Channel                      *string                 `json:"channel,omitempty"`
	Chronicles                   *string                 `json:"chronicles,omitempty"`
	Chronicles_description       *string                 `json:"chronicles_description,omitempty"`
	Chronicles_short_description *string                 `json:"chronicles_short_description,omitempty"`
	Chronology                   *string                 `json:"chronology,omitempty"`
	Cleaners                     *string                 `json:"cleaners,omitempty"`
	Contact_us                   *string                 `json:"contact_us,omitempty"`
	Content                      *string                 `json:"content,omitempty"`
	Content_is_not_available     *string                 `json:"content_is_not_available,omitempty"`
	Contents                     *string                 `json:"contents,omitempty"`
	Contents_description         *string                 `json:"contents_description,omitempty"`
	Contents_short_description   *string                 `json:"contents_short_description,omitempty"`
	Copy_anchor_link             *string                 `json:"copy_anchor_link,omitempty"`
	Copyright_notice             *string                 `json:"copyright_notice,omitempty"`
	Cover                        *string                 `json:"cover,omitempty"`
	CreatedAt                    *DateTime               `json:"createdAt,omitempty"`
	Currency                     *string                 `json:"currency,omitempty"`
	Dark                         *string                 `json:"dark,omitempty"`
	Dark_mode_extension_warning  *string                 `json:"dark_mode_extension_warning,omitempty"`
	Default_description          *string                 `json:"default_description,omitempty"`
	Definition_x                 *string                 `json:"definition_x,omitempty"`
	Description                  *string                 `json:"description,omitempty"`
	Details                      *string                 `json:"details,omitempty"`
	Done                         *string                 `json:"done,omitempty"`
	Double_page_view             *string                 `json:"double_page_view,omitempty"`
	Download_archive             *string                 `json:"download_archive,omitempty"`
	Draft                        *string                 `json:"draft,omitempty"`
	Dubber                       *string                 `json:"dubber,omitempty"`
	Email                        *string                 `json:"email,omitempty"`
	Email_gdpr_notice            *string                 `json:"email_gdpr_notice,omitempty"`
	Empty_folder_message         *string                 `json:"empty_folder_message,omitempty"`
	Folders                      *string                 `json:"folders,omitempty"`
	Followup_content             *string                 `json:"followup_content,omitempty"`
	Font                         *string                 `json:"font,omitempty"`
	Font_size                    *string                 `json:"font_size,omitempty"`
	Front_matter                 *string                 `json:"front_matter,omitempty"`
	Gallery                      *string                 `json:"gallery,omitempty"`
	Game                         *string                 `json:"game,omitempty"`
	Group                        *string                 `json:"group,omitempty"`
	Group_by                     *string                 `json:"group_by,omitempty"`
	Hardcover                    *string                 `json:"hardcover,omitempty"`
	Have_it                      *string                 `json:"have_it,omitempty"`
	Height                       *string                 `json:"height,omitempty"`
	Incomplete                   *string                 `json:"incomplete,omitempty"`
	Item                         *string                 `json:"item,omitempty"`
	Item_not_available           *string                 `json:"item_not_available,omitempty"`
	Language                     *string                 `json:"language,omitempty"`
	Least_popular                *string                 `json:"least_popular,omitempty"`
	Left_to_right                *string                 `json:"left_to_right,omitempty"`
	Legality                     *string                 `json:"legality,omitempty"`
	Level_x                      *string                 `json:"level_x,omitempty"`
	Library                      *string                 `json:"library,omitempty"`
	Library_description          *string                 `json:"library_description,omitempty"`
	Library_short_description    *string                 `json:"library_short_description,omitempty"`
	Licensing_notice             *string                 `json:"licensing_notice,omitempty"`
	Light                        *string                 `json:"light,omitempty"`
	Lighting                     *string                 `json:"lighting,omitempty"`
	Listen_content               *string                 `json:"listen_content,omitempty"`
	Longest                      *string                 `json:"longest,omitempty"`
	Message                      *string                 `json:"message,omitempty"`
	Most_popular                 *string                 `json:"most_popular,omitempty"`
	Name                         *string                 `json:"name,omitempty"`
	Newest                       *string                 `json:"newest,omitempty"`
	News                         *string                 `json:"news,omitempty"`
	News_description             *string                 `json:"news_description,omitempty"`
	Night_reader                 *string                 `json:"night_reader,omitempty"`
	No_results_message           *string                 `json:"no_results_message,omitempty"`
	No_source_warning            *string                 `json:"no_source_warning,omitempty"`
	Notes                        *string                 `json:"notes,omitempty"`
	Oldest                       *string                 `json:"oldest,omitempty"`
	Only_display_items_i_have    *string                 `json:"only_display_items_i_have,omitempty"`
	Only_display_items_i_want    *string                 `json:"only_display_items_i_want,omitempty"`
	Only_display_unmarked_items  *string                 `json:"only_display_unmarked_items,omitempty"`
	Only_unavailable_videos      *string                 `json:"only_unavailable_videos,omitempty"`
	Open_content                 *string                 `json:"open_content,omitempty"`
	Open_search                  *string                 `json:"open_search,omitempty"`
	Open_settings                *string                 `json:"open_settings,omitempty"`
	Order_by                     *string                 `json:"order_by,omitempty"`
	Other                        *string                 `json:"other,omitempty"`
	Page                         *string                 `json:"page,omitempty"`
	Page_not_found               *string                 `json:"page_not_found,omitempty"`
	Page_order                   *string                 `json:"page_order,omitempty"`
	Paper_texture                *string                 `json:"paper_texture,omitempty"`
	Paperback                    *string                 `json:"paperback,omitempty"`
	Performance_mode             *string                 `json:"performance_mode,omitempty"`
	Performance_mode_tooltip     *string                 `json:"performance_mode_tooltip,omitempty"`
	Player_name                  *string                 `json:"player_name,omitempty"`
	Player_name_tooltip          *string                 `json:"player_name_tooltip,omitempty"`
	Previous_content             *string                 `json:"previous_content,omitempty"`
	Price                        *string                 `json:"price,omitempty"`
	Primary_language             *string                 `json:"primary_language,omitempty"`
	Pronouns                     *string                 `json:"pronouns,omitempty"`
	Proofreader                  *string                 `json:"proofreader,omitempty"`
	Quality                      *string                 `json:"quality,omitempty"`
	Read_content                 *string                 `json:"read_content,omitempty"`
	Reading_layout               *string                 `json:"reading_layout,omitempty"`
	Release_date                 *string                 `json:"release_date,omitempty"`
	Release_year                 *string                 `json:"release_year,omitempty"`
	Reset_all_filters            *string                 `json:"reset_all_filters,omitempty"`
	Reset_all_options            *string                 `json:"reset_all_options,omitempty"`
	Response_email_success       *string                 `json:"response_email_success,omitempty"`
	Response_invalid_code        *string                 `json:"response_invalid_code,omitempty"`
	Response_invalid_email       *string                 `json:"response_invalid_email,omitempty"`
	Return_to_x                  *string                 `json:"return_to_x,omitempty"`
	Review                       *string                 `json:"review,omitempty"`
	Right_to_left                *string                 `json:"right_to_left,omitempty"`
	Scan                         *string                 `json:"scan,omitempty"`
	Scanlation                   *string                 `json:"scanlation,omitempty"`
	Scanners                     *string                 `json:"scanners,omitempty"`
	Search                       *string                 `json:"search,omitempty"`
	Search_placeholder           *string                 `json:"search_placeholder,omitempty"`
	Secondary_language           *string                 `json:"secondary_language,omitempty"`
	Select_option_sidebar        *string                 `json:"select_option_sidebar,omitempty"`
	Send                         *string                 `json:"send,omitempty"`
	Settings                     *string                 `json:"settings,omitempty"`
	Shadow                       *string                 `json:"shadow,omitempty"`
	Sharing_policy               *string                 `json:"sharing_policy,omitempty"`
	Shortest                     *string                 `json:"shortest,omitempty"`
	Show_primary_items           *string                 `json:"show_primary_items,omitempty"`
	Show_secondary_items         *string                 `json:"show_secondary_items,omitempty"`
	Show_subitems                *string                 `json:"show_subitems,omitempty"`
	Showing_x_out_of_y_results   *string                 `json:"showing_x_out_of_y_results,omitempty"`
	Side_pages                   *string                 `json:"side_pages,omitempty"`
	Single_page_view             *string                 `json:"single_page_view,omitempty"`
	Size                         *string                 `json:"size,omitempty"`
	Source                       *string                 `json:"source,omitempty"`
	Source_language              *string                 `json:"source_language,omitempty"`
	Special_pages                *string                 `json:"special_pages,omitempty"`
	Status                       *string                 `json:"status,omitempty"`
	Status_done                  *string                 `json:"status_done,omitempty"`
	Status_draft                 *string                 `json:"status_draft,omitempty"`
	Status_incomplete            *string                 `json:"status_incomplete,omitempty"`
	Status_review                *string                 `json:"status_review,omitempty"`
	Story_x                      *string                 `json:"story_x,omitempty"`
	Subber                       *string                 `json:"subber,omitempty"`
	Subitem                      *string                 `json:"subitem,omitempty"`
	Subitem_of_x                 *string                 `json:"subitem_of_x,omitempty"`
	Subscribers                  *string                 `json:"subscribers,omitempty"`
	Summary                      *string                 `json:"summary,omitempty"`
	Switch_to_folder_view        *string                 `json:"switch_to_folder_view,omitempty"`
	Switch_to_grid_view          *string                 `json:"switch_to_grid_view,omitempty"`
	Table_of_contents            *string                 `json:"table_of_contents,omitempty"`
	Tags                         *string                 `json:"tags,omitempty"`
	Textual                      *string                 `json:"textual,omitempty"`
	Theme                        *string                 `json:"theme,omitempty"`
	Thickness                    *string                 `json:"thickness,omitempty"`
	Transcriber                  *string                 `json:"transcriber,omitempty"`
	Transcript_notice            *string                 `json:"transcript_notice,omitempty"`
	Translation_notice           *string                 `json:"translation_notice,omitempty"`
	Translator                   *string                 `json:"translator,omitempty"`
	Type                         *string                 `json:"type,omitempty"`
	Type_information             *string                 `json:"type_information,omitempty"`
	Typesetters                  *string                 `json:"typesetters,omitempty"`
	Ui_language                  *LanguageEntityResponse `json:"ui_language,omitempty"`
	UpdatedAt                    *DateTime               `json:"updatedAt,omitempty"`
	Variant                      *string                 `json:"variant,omitempty"`
	Variant_of_x                 *string                 `json:"variant_of_x,omitempty"`
	Video                        *string                 `json:"video,omitempty"`
	Videos                       *string                 `json:"videos,omitempty"`
	View_on                      *string                 `json:"view_on,omitempty"`
	View_on_x                    *string                 `json:"view_on_x,omitempty"`
	View_scans                   *string                 `json:"view_scans,omitempty"`
	Want_it                      *string                 `json:"want_it,omitempty"`
	Watch_content                *string                 `json:"watch_content,omitempty"`
	Weapon                       *string                 `json:"weapon,omitempty"`
	Weapons_description          *string                 `json:"weapons_description,omitempty"`
	Width                        *string                 `json:"width,omitempty"`
	Wiki                         *string                 `json:"wiki,omitempty"`
	Wiki_description             *string                 `json:"wiki_description,omitempty"`
	Wiki_short_description       *string                 `json:"wiki_short_description,omitempty"`
	X_results                    *string                 `json:"x_results,omitempty"`
}

func (*WebsiteInterface) isGenericMorph() {}

type WebsiteInterfaceEntity struct {
	Attributes *WebsiteInterface `json:"attributes,omitempty"`
	Id         string            `json:"id,omitempty"`
}

type WebsiteInterfaceEntityResponse struct {
	Data *WebsiteInterfaceEntity `json:"data,omitempty"`
}

type WebsiteInterfaceEntityResponseCollection struct {
	Data []WebsiteInterfaceEntity `json:"data"`
	Meta *ResponseCollectionMeta  `json:"meta"`
}

type WebsiteInterfaceFiltersInput struct {
	About_us                     *StringFilterInput              `json:"about_us,omitempty"`
	About_us_description         *StringFilterInput              `json:"about_us_description,omitempty"`
	Accords_handbook             *StringFilterInput              `json:"accords_handbook,omitempty"`
	All                          *StringFilterInput              `json:"all,omitempty"`
	Always_show_info             *StringFilterInput              `json:"always_show_info,omitempty"`
	Anchor_link_copied           *StringFilterInput              `json:"anchor_link_copied,omitempty"`
	And                          []*WebsiteInterfaceFiltersInput `json:"and,omitempty"`
	Archives                     *StringFilterInput              `json:"archives,omitempty"`
	Archives_description         *StringFilterInput              `json:"archives_description,omitempty"`
	Audio                        *StringFilterInput              `json:"audio,omitempty"`
	Author                       *StringFilterInput              `json:"author,omitempty"`
	Auto                         *StringFilterInput              `json:"auto,omitempty"`
	Available_at                 *StringFilterInput              `json:"available_at,omitempty"`
	Available_at_x               *StringFilterInput              `json:"available_at_x,omitempty"`
	Back_matter                  *StringFilterInput              `json:"back_matter,omitempty"`
	Binding                      *StringFilterInput              `json:"binding,omitempty"`
	Book_fold                    *StringFilterInput              `json:"book_fold,omitempty"`
	Calculated                   *StringFilterInput              `json:"calculated,omitempty"`
	Category                     *StringFilterInput              `json:"category,omitempty"`
	Channel                      *StringFilterInput              `json:"channel,omitempty"`
	Chronicles                   *StringFilterInput              `json:"chronicles,omitempty"`
	Chronicles_description       *StringFilterInput              `json:"chronicles_description,omitempty"`
	Chronicles_short_description *StringFilterInput              `json:"chronicles_short_description,omitempty"`
	Chronology                   *StringFilterInput              `json:"chronology,omitempty"`
	Cleaners                     *StringFilterInput              `json:"cleaners,omitempty"`
	Contact_us                   *StringFilterInput              `json:"contact_us,omitempty"`
	Content                      *StringFilterInput              `json:"content,omitempty"`
	Content_is_not_available     *StringFilterInput              `json:"content_is_not_available,omitempty"`
	Contents                     *StringFilterInput              `json:"contents,omitempty"`
	Contents_description         *StringFilterInput              `json:"contents_description,omitempty"`
	Contents_short_description   *StringFilterInput              `json:"contents_short_description,omitempty"`
	Copy_anchor_link             *StringFilterInput              `json:"copy_anchor_link,omitempty"`
	Copyright_notice             *StringFilterInput              `json:"copyright_notice,omitempty"`
	Cover                        *StringFilterInput              `json:"cover,omitempty"`
	CreatedAt                    *DateTimeFilterInput            `json:"createdAt,omitempty"`
	Currency                     *StringFilterInput              `json:"currency,omitempty"`
	Dark                         *StringFilterInput              `json:"dark,omitempty"`
	Dark_mode_extension_warning  *StringFilterInput              `json:"dark_mode_extension_warning,omitempty"`
	Default_description          *StringFilterInput              `json:"default_description,omitempty"`
	Definition_x                 *StringFilterInput              `json:"definition_x,omitempty"`
	Description                  *StringFilterInput              `json:"description,omitempty"`
	Details                      *StringFilterInput              `json:"details,omitempty"`
	Done                         *StringFilterInput              `json:"done,omitempty"`
	Double_page_view             *StringFilterInput              `json:"double_page_view,omitempty"`
	Download_archive             *StringFilterInput              `json:"download_archive,omitempty"`
	Draft                        *StringFilterInput              `json:"draft,omitempty"`
	Dubber                       *StringFilterInput              `json:"dubber,omitempty"`
	Email                        *StringFilterInput              `json:"email,omitempty"`
	Email_gdpr_notice            *StringFilterInput              `json:"email_gdpr_notice,omitempty"`
	Empty_folder_message         *StringFilterInput              `json:"empty_folder_message,omitempty"`
	Folders                      *StringFilterInput              `json:"folders,omitempty"`
	Followup_content             *StringFilterInput              `json:"followup_content,omitempty"`
	Font                         *StringFilterInput              `json:"font,omitempty"`
	Font_size                    *StringFilterInput              `json:"font_size,omitempty"`
	Front_matter                 *StringFilterInput              `json:"front_matter,omitempty"`
	Gallery                      *StringFilterInput              `json:"gallery,omitempty"`
	Game                         *StringFilterInput              `json:"game,omitempty"`
	Group                        *StringFilterInput              `json:"group,omitempty"`
	Group_by                     *StringFilterInput              `json:"group_by,omitempty"`
	Hardcover                    *StringFilterInput              `json:"hardcover,omitempty"`
	Have_it                      *StringFilterInput              `json:"have_it,omitempty"`
	Height                       *StringFilterInput              `json:"height,omitempty"`
	Id                           *IDFilterInput                  `json:"id,omitempty"`
	Incomplete                   *StringFilterInput              `json:"incomplete,omitempty"`
	Item                         *StringFilterInput              `json:"item,omitempty"`
	Item_not_available           *StringFilterInput              `json:"item_not_available,omitempty"`
	Language                     *StringFilterInput              `json:"language,omitempty"`
	Least_popular                *StringFilterInput              `json:"least_popular,omitempty"`
	Left_to_right                *StringFilterInput              `json:"left_to_right,omitempty"`
	Legality                     *StringFilterInput              `json:"legality,omitempty"`
	Level_x                      *StringFilterInput              `json:"level_x,omitempty"`
	Library                      *StringFilterInput              `json:"library,omitempty"`
	Library_description          *StringFilterInput              `json:"library_description,omitempty"`
	Library_short_description    *StringFilterInput              `json:"library_short_description,omitempty"`
	Licensing_notice             *StringFilterInput              `json:"licensing_notice,omitempty"`
	Light                        *StringFilterInput              `json:"light,omitempty"`
	Lighting                     *StringFilterInput              `json:"lighting,omitempty"`
	Listen_content               *StringFilterInput              `json:"listen_content,omitempty"`
	Longest                      *StringFilterInput              `json:"longest,omitempty"`
	Message                      *StringFilterInput              `json:"message,omitempty"`
	Most_popular                 *StringFilterInput              `json:"most_popular,omitempty"`
	Name                         *StringFilterInput              `json:"name,omitempty"`
	Newest                       *StringFilterInput              `json:"newest,omitempty"`
	News                         *StringFilterInput              `json:"news,omitempty"`
	News_description             *StringFilterInput              `json:"news_description,omitempty"`
	Night_reader                 *StringFilterInput              `json:"night_reader,omitempty"`
	No_results_message           *StringFilterInput              `json:"no_results_message,omitempty"`
	No_source_warning            *StringFilterInput              `json:"no_source_warning,omitempty"`
	Not                          *WebsiteInterfaceFiltersInput   `json:"not,omitempty"`
	Notes                        *StringFilterInput              `json:"notes,omitempty"`
	Oldest                       *StringFilterInput              `json:"oldest,omitempty"`
	Only_display_items_i_have    *StringFilterInput              `json:"only_display_items_i_have,omitempty"`
	Only_display_items_i_want    *StringFilterInput              `json:"only_display_items_i_want,omitempty"`
	Only_display_unmarked_items  *StringFilterInput              `json:"only_display_unmarked_items,omitempty"`
	Only_unavailable_videos      *StringFilterInput              `json:"only_unavailable_videos,omitempty"`
	Open_content                 *StringFilterInput              `json:"open_content,omitempty"`
	Open_search                  *StringFilterInput              `json:"open_search,omitempty"`
	Open_settings                *StringFilterInput              `json:"open_settings,omitempty"`
	Or                           []*WebsiteInterfaceFiltersInput `json:"or,omitempty"`
	Order_by                     *StringFilterInput              `json:"order_by,omitempty"`
	Other                        *StringFilterInput              `json:"other,omitempty"`
	Page                         *StringFilterInput              `json:"page,omitempty"`
	Page_not_found               *StringFilterInput              `json:"page_not_found,omitempty"`
	Page_order                   *StringFilterInput              `json:"page_order,omitempty"`
	Paper_texture                *StringFilterInput              `json:"paper_texture,omitempty"`
	Paperback                    *StringFilterInput              `json:"paperback,omitempty"`
	Performance_mode             *StringFilterInput              `json:"performance_mode,omitempty"`
	Performance_mode_tooltip     *StringFilterInput              `json:"performance_mode_tooltip,omitempty"`
	Player_name                  *StringFilterInput              `json:"player_name,omitempty"`
	Player_name_tooltip          *StringFilterInput              `json:"player_name_tooltip,omitempty"`
	Previous_content             *StringFilterInput              `json:"previous_content,omitempty"`
	Price                        *StringFilterInput              `json:"price,omitempty"`
	Primary_language             *StringFilterInput              `json:"primary_language,omitempty"`
	Pronouns                     *StringFilterInput              `json:"pronouns,omitempty"`
	Proofreader                  *StringFilterInput              `json:"proofreader,omitempty"`
	Quality                      *StringFilterInput              `json:"quality,omitempty"`
	Read_content                 *StringFilterInput              `json:"read_content,omitempty"`
	Reading_layout               *StringFilterInput              `json:"reading_layout,omitempty"`
	Release_date                 *StringFilterInput              `json:"release_date,omitempty"`
	Release_year                 *StringFilterInput              `json:"release_year,omitempty"`
	Reset_all_filters            *StringFilterInput              `json:"reset_all_filters,omitempty"`
	Reset_all_options            *StringFilterInput              `json:"reset_all_options,omitempty"`
	Response_email_success       *StringFilterInput              `json:"response_email_success,omitempty"`
	Response_invalid_code        *StringFilterInput              `json:"response_invalid_code,omitempty"`
	Response_invalid_email       *StringFilterInput              `json:"response_invalid_email,omitempty"`
	Return_to_x                  *StringFilterInput              `json:"return_to_x,omitempty"`
	Review                       *StringFilterInput              `json:"review,omitempty"`
	Right_to_left                *StringFilterInput              `json:"right_to_left,omitempty"`
	Scan                         *StringFilterInput              `json:"scan,omitempty"`
	Scanlation                   *StringFilterInput              `json:"scanlation,omitempty"`
	Scanners                     *StringFilterInput              `json:"scanners,omitempty"`
	Search                       *StringFilterInput              `json:"search,omitempty"`
	Search_placeholder           *StringFilterInput              `json:"search_placeholder,omitempty"`
	Secondary_language           *StringFilterInput              `json:"secondary_language,omitempty"`
	Select_option_sidebar        *StringFilterInput              `json:"select_option_sidebar,omitempty"`
	Send                         *StringFilterInput              `json:"send,omitempty"`
	Settings                     *StringFilterInput              `json:"settings,omitempty"`
	Shadow                       *StringFilterInput              `json:"shadow,omitempty"`
	Sharing_policy               *StringFilterInput              `json:"sharing_policy,omitempty"`
	Shortest                     *StringFilterInput              `json:"shortest,omitempty"`
	Show_primary_items           *StringFilterInput              `json:"show_primary_items,omitempty"`
	Show_secondary_items         *StringFilterInput              `json:"show_secondary_items,omitempty"`
	Show_subitems                *StringFilterInput              `json:"show_subitems,omitempty"`
	Showing_x_out_of_y_results   *StringFilterInput              `json:"showing_x_out_of_y_results,omitempty"`
	Side_pages                   *StringFilterInput              `json:"side_pages,omitempty"`
	Single_page_view             *StringFilterInput              `json:"single_page_view,omitempty"`
	Size                         *StringFilterInput              `json:"size,omitempty"`
	Source                       *StringFilterInput              `json:"source,omitempty"`
	Source_language              *StringFilterInput              `json:"source_language,omitempty"`
	Special_pages                *StringFilterInput              `json:"special_pages,omitempty"`
	Status                       *StringFilterInput              `json:"status,omitempty"`
	Status_done                  *StringFilterInput              `json:"status_done,omitempty"`
	Status_draft                 *StringFilterInput              `json:"status_draft,omitempty"`
	Status_incomplete            *StringFilterInput              `json:"status_incomplete,omitempty"`
	Status_review                *StringFilterInput              `json:"status_review,omitempty"`
	Story_x                      *StringFilterInput              `json:"story_x,omitempty"`
	Subber                       *StringFilterInput              `json:"subber,omitempty"`
	Subitem                      *StringFilterInput              `json:"subitem,omitempty"`
	Subitem_of_x                 *StringFilterInput              `json:"subitem_of_x,omitempty"`
	Subscribers                  *StringFilterInput              `json:"subscribers,omitempty"`
	Summary                      *StringFilterInput              `json:"summary,omitempty"`
	Switch_to_folder_view        *StringFilterInput              `json:"switch_to_folder_view,omitempty"`
	Switch_to_grid_view          *StringFilterInput              `json:"switch_to_grid_view,omitempty"`
	Table_of_contents            *StringFilterInput              `json:"table_of_contents,omitempty"`
	Tags                         *StringFilterInput              `json:"tags,omitempty"`
	Textual                      *StringFilterInput              `json:"textual,omitempty"`
	Theme                        *StringFilterInput              `json:"theme,omitempty"`
	Thickness                    *StringFilterInput              `json:"thickness,omitempty"`
	Transcriber                  *StringFilterInput              `json:"transcriber,omitempty"`
	Transcript_notice            *StringFilterInput              `json:"transcript_notice,omitempty"`
	Translation_notice           *StringFilterInput              `json:"translation_notice,omitempty"`
	Translator                   *StringFilterInput              `json:"translator,omitempty"`
	Type                         *StringFilterInput              `json:"type,omitempty"`
	Type_information             *StringFilterInput              `json:"type_information,omitempty"`
	Typesetters                  *StringFilterInput              `json:"typesetters,omitempty"`
	Ui_language                  *LanguageFiltersInput           `json:"ui_language,omitempty"`
	UpdatedAt                    *DateTimeFilterInput            `json:"updatedAt,omitempty"`
	Variant                      *StringFilterInput              `json:"variant,omitempty"`
	Variant_of_x                 *StringFilterInput              `json:"variant_of_x,omitempty"`
	Video                        *StringFilterInput              `json:"video,omitempty"`
	Videos                       *StringFilterInput              `json:"videos,omitempty"`
	View_on                      *StringFilterInput              `json:"view_on,omitempty"`
	View_on_x                    *StringFilterInput              `json:"view_on_x,omitempty"`
	View_scans                   *StringFilterInput              `json:"view_scans,omitempty"`
	Want_it                      *StringFilterInput              `json:"want_it,omitempty"`
	Watch_content                *StringFilterInput              `json:"watch_content,omitempty"`
	Weapon                       *StringFilterInput              `json:"weapon,omitempty"`
	Weapons_description          *StringFilterInput              `json:"weapons_description,omitempty"`
	Width                        *StringFilterInput              `json:"width,omitempty"`
	Wiki                         *StringFilterInput              `json:"wiki,omitempty"`
	Wiki_description             *StringFilterInput              `json:"wiki_description,omitempty"`
	Wiki_short_description       *StringFilterInput              `json:"wiki_short_description,omitempty"`
	X_results                    *StringFilterInput              `json:"x_results,omitempty"`
}

type WebsiteInterfaceInput struct {
	About_us                     *string `json:"about_us,omitempty"`
	About_us_description         *string `json:"about_us_description,omitempty"`
	Accords_handbook             *string `json:"accords_handbook,omitempty"`
	All                          *string `json:"all,omitempty"`
	Always_show_info             *string `json:"always_show_info,omitempty"`
	Anchor_link_copied           *string `json:"anchor_link_copied,omitempty"`
	Archives                     *string `json:"archives,omitempty"`
	Archives_description         *string `json:"archives_description,omitempty"`
	Audio                        *string `json:"audio,omitempty"`
	Author                       *string `json:"author,omitempty"`
	Auto                         *string `json:"auto,omitempty"`
	Available_at                 *string `json:"available_at,omitempty"`
	Available_at_x               *string `json:"available_at_x,omitempty"`
	Back_matter                  *string `json:"back_matter,omitempty"`
	Binding                      *string `json:"binding,omitempty"`
	Book_fold                    *string `json:"book_fold,omitempty"`
	Calculated                   *string `json:"calculated,omitempty"`
	Category                     *string `json:"category,omitempty"`
	Channel                      *string `json:"channel,omitempty"`
	Chronicles                   *string `json:"chronicles,omitempty"`
	Chronicles_description       *string `json:"chronicles_description,omitempty"`
	Chronicles_short_description *string `json:"chronicles_short_description,omitempty"`
	Chronology                   *string `json:"chronology,omitempty"`
	Cleaners                     *string `json:"cleaners,omitempty"`
	Contact_us                   *string `json:"contact_us,omitempty"`
	Content                      *string `json:"content,omitempty"`
	Content_is_not_available     *string `json:"content_is_not_available,omitempty"`
	Contents                     *string `json:"contents,omitempty"`
	Contents_description         *string `json:"contents_description,omitempty"`
	Contents_short_description   *string `json:"contents_short_description,omitempty"`
	Copy_anchor_link             *string `json:"copy_anchor_link,omitempty"`
	Copyright_notice             *string `json:"copyright_notice,omitempty"`
	Cover                        *string `json:"cover,omitempty"`
	Currency                     *string `json:"currency,omitempty"`
	Dark                         *string `json:"dark,omitempty"`
	Dark_mode_extension_warning  *string `json:"dark_mode_extension_warning,omitempty"`
	Default_description          *string `json:"default_description,omitempty"`
	Definition_x                 *string `json:"definition_x,omitempty"`
	Description                  *string `json:"description,omitempty"`
	Details                      *string `json:"details,omitempty"`
	Done                         *string `json:"done,omitempty"`
	Double_page_view             *string `json:"double_page_view,omitempty"`
	Download_archive             *string `json:"download_archive,omitempty"`
	Draft                        *string `json:"draft,omitempty"`
	Dubber                       *string `json:"dubber,omitempty"`
	Email                        *string `json:"email,omitempty"`
	Email_gdpr_notice            *string `json:"email_gdpr_notice,omitempty"`
	Empty_folder_message         *string `json:"empty_folder_message,omitempty"`
	Folders                      *string `json:"folders,omitempty"`
	Followup_content             *string `json:"followup_content,omitempty"`
	Font                         *string `json:"font,omitempty"`
	Font_size                    *string `json:"font_size,omitempty"`
	Front_matter                 *string `json:"front_matter,omitempty"`
	Gallery                      *string `json:"gallery,omitempty"`
	Game                         *string `json:"game,omitempty"`
	Group                        *string `json:"group,omitempty"`
	Group_by                     *string `json:"group_by,omitempty"`
	Hardcover                    *string `json:"hardcover,omitempty"`
	Have_it                      *string `json:"have_it,omitempty"`
	Height                       *string `json:"height,omitempty"`
	Incomplete                   *string `json:"incomplete,omitempty"`
	Item                         *string `json:"item,omitempty"`
	Item_not_available           *string `json:"item_not_available,omitempty"`
	Language                     *string `json:"language,omitempty"`
	Least_popular                *string `json:"least_popular,omitempty"`
	Left_to_right                *string `json:"left_to_right,omitempty"`
	Legality                     *string `json:"legality,omitempty"`
	Level_x                      *string `json:"level_x,omitempty"`
	Library                      *string `json:"library,omitempty"`
	Library_description          *string `json:"library_description,omitempty"`
	Library_short_description    *string `json:"library_short_description,omitempty"`
	Licensing_notice             *string `json:"licensing_notice,omitempty"`
	Light                        *string `json:"light,omitempty"`
	Lighting                     *string `json:"lighting,omitempty"`
	Listen_content               *string `json:"listen_content,omitempty"`
	Longest                      *string `json:"longest,omitempty"`
	Message                      *string `json:"message,omitempty"`
	Most_popular                 *string `json:"most_popular,omitempty"`
	Name                         *string `json:"name,omitempty"`
	Newest                       *string `json:"newest,omitempty"`
	News                         *string `json:"news,omitempty"`
	News_description             *string `json:"news_description,omitempty"`
	Night_reader                 *string `json:"night_reader,omitempty"`
	No_results_message           *string `json:"no_results_message,omitempty"`
	No_source_warning            *string `json:"no_source_warning,omitempty"`
	Notes                        *string `json:"notes,omitempty"`
	Oldest                       *string `json:"oldest,omitempty"`
	Only_display_items_i_have    *string `json:"only_display_items_i_have,omitempty"`
	Only_display_items_i_want    *string `json:"only_display_items_i_want,omitempty"`
	Only_display_unmarked_items  *string `json:"only_display_unmarked_items,omitempty"`
	Only_unavailable_videos      *string `json:"only_unavailable_videos,omitempty"`
	Open_content                 *string `json:"open_content,omitempty"`
	Open_search                  *string `json:"open_search,omitempty"`
	Open_settings                *string `json:"open_settings,omitempty"`
	Order_by                     *string `json:"order_by,omitempty"`
	Other                        *string `json:"other,omitempty"`
	Page                         *string `json:"page,omitempty"`
	Page_not_found               *string `json:"page_not_found,omitempty"`
	Page_order                   *string `json:"page_order,omitempty"`
	Paper_texture                *string `json:"paper_texture,omitempty"`
	Paperback                    *string `json:"paperback,omitempty"`
	Performance_mode             *string `json:"performance_mode,omitempty"`
	Performance_mode_tooltip     *string `json:"performance_mode_tooltip,omitempty"`
	Player_name                  *string `json:"player_name,omitempty"`
	Player_name_tooltip          *string `json:"player_name_tooltip,omitempty"`
	Previous_content             *string `json:"previous_content,omitempty"`
	Price                        *string `json:"price,omitempty"`
	Primary_language             *string `json:"primary_language,omitempty"`
	Pronouns                     *string `json:"pronouns,omitempty"`
	Proofreader                  *string `json:"proofreader,omitempty"`
	Quality                      *string `json:"quality,omitempty"`
	Read_content                 *string `json:"read_content,omitempty"`
	Reading_layout               *string `json:"reading_layout,omitempty"`
	Release_date                 *string `json:"release_date,omitempty"`
	Release_year                 *string `json:"release_year,omitempty"`
	Reset_all_filters            *string `json:"reset_all_filters,omitempty"`
	Reset_all_options            *string `json:"reset_all_options,omitempty"`
	Response_email_success       *string `json:"response_email_success,omitempty"`
	Response_invalid_code        *string `json:"response_invalid_code,omitempty"`
	Response_invalid_email       *string `json:"response_invalid_email,omitempty"`
	Return_to_x                  *string `json:"return_to_x,omitempty"`
	Review                       *string `json:"review,omitempty"`
	Right_to_left                *string `json:"right_to_left,omitempty"`
	Scan                         *string `json:"scan,omitempty"`
	Scanlation                   *string `json:"scanlation,omitempty"`
	Scanners                     *string `json:"scanners,omitempty"`
	Search                       *string `json:"search,omitempty"`
	Search_placeholder           *string `json:"search_placeholder,omitempty"`
	Secondary_language           *string `json:"secondary_language,omitempty"`
	Select_option_sidebar        *string `json:"select_option_sidebar,omitempty"`
	Send                         *string `json:"send,omitempty"`
	Settings                     *string `json:"settings,omitempty"`
	Shadow                       *string `json:"shadow,omitempty"`
	Sharing_policy               *string `json:"sharing_policy,omitempty"`
	Shortest                     *string `json:"shortest,omitempty"`
	Show_primary_items           *string `json:"show_primary_items,omitempty"`
	Show_secondary_items         *string `json:"show_secondary_items,omitempty"`
	Show_subitems                *string `json:"show_subitems,omitempty"`
	Showing_x_out_of_y_results   *string `json:"showing_x_out_of_y_results,omitempty"`
	Side_pages                   *string `json:"side_pages,omitempty"`
	Single_page_view             *string `json:"single_page_view,omitempty"`
	Size                         *string `json:"size,omitempty"`
	Source                       *string `json:"source,omitempty"`
	Source_language              *string `json:"source_language,omitempty"`
	Special_pages                *string `json:"special_pages,omitempty"`
	Status                       *string `json:"status,omitempty"`
	Status_done                  *string `json:"status_done,omitempty"`
	Status_draft                 *string `json:"status_draft,omitempty"`
	Status_incomplete            *string `json:"status_incomplete,omitempty"`
	Status_review                *string `json:"status_review,omitempty"`
	Story_x                      *string `json:"story_x,omitempty"`
	Subber                       *string `json:"subber,omitempty"`
	Subitem                      *string `json:"subitem,omitempty"`
	Subitem_of_x                 *string `json:"subitem_of_x,omitempty"`
	Subscribers                  *string `json:"subscribers,omitempty"`
	Summary                      *string `json:"summary,omitempty"`
	Switch_to_folder_view        *string `json:"switch_to_folder_view,omitempty"`
	Switch_to_grid_view          *string `json:"switch_to_grid_view,omitempty"`
	Table_of_contents            *string `json:"table_of_contents,omitempty"`
	Tags                         *string `json:"tags,omitempty"`
	Textual                      *string `json:"textual,omitempty"`
	Theme                        *string `json:"theme,omitempty"`
	Thickness                    *string `json:"thickness,omitempty"`
	Transcriber                  *string `json:"transcriber,omitempty"`
	Transcript_notice            *string `json:"transcript_notice,omitempty"`
	Translation_notice           *string `json:"translation_notice,omitempty"`
	Translator                   *string `json:"translator,omitempty"`
	Type                         *string `json:"type,omitempty"`
	Type_information             *string `json:"type_information,omitempty"`
	Typesetters                  *string `json:"typesetters,omitempty"`
	Ui_language                  string  `json:"ui_language,omitempty"`
	Variant                      *string `json:"variant,omitempty"`
	Variant_of_x                 *string `json:"variant_of_x,omitempty"`
	Video                        *string `json:"video,omitempty"`
	Videos                       *string `json:"videos,omitempty"`
	View_on                      *string `json:"view_on,omitempty"`
	View_on_x                    *string `json:"view_on_x,omitempty"`
	View_scans                   *string `json:"view_scans,omitempty"`
	Want_it                      *string `json:"want_it,omitempty"`
	Watch_content                *string `json:"watch_content,omitempty"`
	Weapon                       *string `json:"weapon,omitempty"`
	Weapons_description          *string `json:"weapons_description,omitempty"`
	Width                        *string `json:"width,omitempty"`
	Wiki                         *string `json:"wiki,omitempty"`
	Wiki_description             *string `json:"wiki_description,omitempty"`
	Wiki_short_description       *string `json:"wiki_short_description,omitempty"`
	X_results                    *string `json:"x_results,omitempty"`
}

type WikiPage struct {
	Categories       *CategoryRelationResponseCollection        `json:"categories,omitempty"`
	Chronology_items *ChronologyItemRelationResponseCollection  `json:"chronology_items,omitempty"`
	CreatedAt        *DateTime                                  `json:"createdAt,omitempty"`
	Definitions      []*ComponentWikiSpecializationGlossaryItem `json:"definitions,omitempty"`
	Slug             string                                     `json:"slug"`
	Tags             *WikiPagesTagRelationResponseCollection    `json:"tags,omitempty"`
	Thumbnail        *UploadFileEntityResponse                  `json:"thumbnail,omitempty"`
	Translations     []*ComponentTranslationsWiki               `json:"translations,omitempty"`
	UpdatedAt        *DateTime                                  `json:"updatedAt,omitempty"`
	Weapon           *WeaponStoryEntityResponse                 `json:"weapon,omitempty"`
}

func (*WikiPage) isGenericMorph() {}

type WikiPageEntity struct {
	Attributes *WikiPage `json:"attributes,omitempty"`
	Id         string    `json:"id,omitempty"`
}

type WikiPageEntityResponse struct {
	Data *WikiPageEntity `json:"data,omitempty"`
}

type WikiPageEntityResponseCollection struct {
	Data []WikiPageEntity        `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type WikiPageFiltersInput struct {
	And              []*WikiPageFiltersInput                              `json:"and,omitempty"`
	Categories       *CategoryFiltersInput                                `json:"categories,omitempty"`
	Chronology_items *ChronologyItemFiltersInput                          `json:"chronology_items,omitempty"`
	CreatedAt        *DateTimeFilterInput                                 `json:"createdAt,omitempty"`
	Definitions      *ComponentWikiSpecializationGlossaryItemFiltersInput `json:"definitions,omitempty"`
	Id               *IDFilterInput                                       `json:"id,omitempty"`
	Not              *WikiPageFiltersInput                                `json:"not,omitempty"`
	Or               []*WikiPageFiltersInput                              `json:"or,omitempty"`
	Slug             *StringFilterInput                                   `json:"slug,omitempty"`
	Tags             *WikiPagesTagFiltersInput                            `json:"tags,omitempty"`
	Translations     *ComponentTranslationsWikiFiltersInput               `json:"translations,omitempty"`
	UpdatedAt        *DateTimeFilterInput                                 `json:"updatedAt,omitempty"`
	Weapon           *WeaponStoryFiltersInput                             `json:"weapon,omitempty"`
}

type WikiPageInput struct {
	Categories       []string                                        `json:"categories,omitempty"`
	Chronology_items []string                                        `json:"chronology_items,omitempty"`
	Definitions      []*ComponentWikiSpecializationGlossaryItemInput `json:"definitions,omitempty"`
	Slug             *string                                         `json:"slug,omitempty"`
	Tags             []string                                        `json:"tags,omitempty"`
	Thumbnail        string                                          `json:"thumbnail,omitempty"`
	Translations     []*ComponentTranslationsWikiInput               `json:"translations,omitempty"`
	Weapon           string                                          `json:"weapon,omitempty"`
}

type WikiPageRelationResponseCollection struct {
	Data []WikiPageEntity `json:"data"`
}

type WikiPagesTag struct {
	CreatedAt *DateTime                           `json:"createdAt,omitempty"`
	Slug      string                              `json:"slug"`
	Titles    []*ComponentTranslationsSimpleTitle `json:"titles,omitempty"`
	UpdatedAt *DateTime                           `json:"updatedAt,omitempty"`
}

func (*WikiPagesTag) isGenericMorph() {}

type WikiPagesTagEntity struct {
	Attributes *WikiPagesTag `json:"attributes,omitempty"`
	Id         string        `json:"id,omitempty"`
}

type WikiPagesTagEntityResponse struct {
	Data *WikiPagesTagEntity `json:"data,omitempty"`
}

type WikiPagesTagEntityResponseCollection struct {
	Data []WikiPagesTagEntity    `json:"data"`
	Meta *ResponseCollectionMeta `json:"meta"`
}

type WikiPagesTagFiltersInput struct {
	And       []*WikiPagesTagFiltersInput                   `json:"and,omitempty"`
	CreatedAt *DateTimeFilterInput                          `json:"createdAt,omitempty"`
	Id        *IDFilterInput                                `json:"id,omitempty"`
	Not       *WikiPagesTagFiltersInput                     `json:"not,omitempty"`
	Or        []*WikiPagesTagFiltersInput                   `json:"or,omitempty"`
	Slug      *StringFilterInput                            `json:"slug,omitempty"`
	Titles    *ComponentTranslationsSimpleTitleFiltersInput `json:"titles,omitempty"`
	UpdatedAt *DateTimeFilterInput                          `json:"updatedAt,omitempty"`
}

type WikiPagesTagInput struct {
	Slug   *string                                  `json:"slug,omitempty"`
	Titles []*ComponentTranslationsSimpleTitleInput `json:"titles,omitempty"`
}

type WikiPagesTagRelationResponseCollection struct {
	Data []WikiPagesTagEntity `json:"data"`
}
